<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bravo Kernel</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bravo-kernel.com/"/>
  <updated>2017-03-14T08:14:50.769Z</updated>
  <id>http://bravo-kernel.com/</id>
  
  <author>
    <name>bravo-kernel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to use a CakePHP API as the data backend for Ember in 30 minutes</title>
    <link href="http://bravo-kernel.com/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/"/>
    <id>http://bravo-kernel.com/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/</id>
    <published>2017-03-13T18:00:00.000Z</published>
    <updated>2017-03-14T08:14:50.769Z</updated>
    
    <content type="html"><![CDATA[<p>In this follow-up post to <a href="/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/">How to make your CakePHP 3 API produce JSON API</a>
we will show you how easy it is to use your CakePHP API as the backend for an <a href="http://emberjs.com/" target="_blank" rel="external">Ember</a>
application, allowing you to keep benefiting from the extremely powerful
<a href="https://book.cakephp.org/3.0/en/orm.html" target="_blank" rel="external">CakePHP ORM</a>
whilst also enjoying all the frontend-goodies provided by Ember.</p>
<p>The tutorial:</p>
<ul>
<li>provides step-by-step instructions</li>
<li>ends with a full CRUD implementation</li>
<li>adds background information to help you understand the underlying concepts</li>
</ul>
<h2 id="CakePHP-Users"><a href="#CakePHP-Users" class="headerlink" title="CakePHP Users"></a>CakePHP Users</h2><p>Even though this tutorial does not touch a single piece of PHP code the learning
curve should be minimal since both frameworks share a lot of characteristics:</p>
<ul>
<li>Convention over configuration</li>
<li>A stack of proven tools that “just work”</li>
<li>Command line tools for baking/generating code</li>
<li>Rapid Development; getting productive, very fast</li>
<li>Highly maintainable, painless upgrades</li>
<li>Suitable for both small and ambitous applications</li>
</ul>
<h2 id="Before-We-Begin"><a href="#Before-We-Begin" class="headerlink" title="Before We Begin"></a>Before We Begin</h2><p>This is part six of the CakePHP 3 REST API tutorial series:</p>
<ol>
<li><a href="/2015/04/how-to-build-a-cakephp-3-rest-api-in-minutes/">How to build a CakePHP 3 REST API in minutes</a></li>
<li><a href="http://cakebox:4000/2015/04/how-to-use-a-cakephp-3-rest-api/" target="_blank" rel="external">How to use a CakePHP 3 REST API</a></li>
<li><a href="/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/">How to prefix route a CakePHP 3 REST API</a></li>
<li><a href="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/">How to add JWT Authentication to a CakePHP 3 REST API</a></li>
<li><a href="/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/">How to make your CakePHP 3 API produce JSON API</a></li>
<li>How to create an Ember application with (CakePHP) JSON API backend in 30 minutes</li>
</ol>
<p>Before starting this tutorial <strong>make absolutely sure</strong>:</p>
<ul>
<li>that you have the <code>cake3api.app</code> API up-and-running</li>
<li>that it is producing valid JSON API</li>
<li>that it is allowing CORS requests</li>
</ul>
<p>You may create the API by either:</p>
<ul>
<li>completing <a href="2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/">the previous tutorial</a></li>
<li>starting fresh by using these
<a href="https://github.com/bravo-kernel/application-examples/tree/master/blog-how-to-make-your-cakephp-3-api-produce-jsonapi" target="_blank" rel="external">end-state application sources</a>,
composer installing and running the database migration.</li>
</ul>
<h2 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h2><p>This tutorial assumes:</p>
<ul>
<li>the hostname serving your Ember application is <a href="https://github.com/alt3/cakebox" target="_blank" rel="external">cakebox</a> (replace with your own system name where applicable)</li>
<li>the FQDN of your API is <code>cake3api.app</code> (replace with your own FQDN where applicable)</li>
<li>Chrome with the <a href="https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi" target="_blank" rel="external">Ember Inspector add-on</a> as your client browser</li>
</ul>
<h2 id="1-TLDR-just-give-me-the-Ember-end-state-source-files"><a href="#1-TLDR-just-give-me-the-Ember-end-state-source-files" class="headerlink" title="1. TLDR; just give me the Ember end-state source files"></a>1. TLDR; just give me the Ember end-state source files</h2><p>Novice users should skip this step.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/bravo-kernel/application-examples</div><div class="line"><span class="built_in">cd</span> application-examples</div><div class="line"><span class="built_in">cd</span> blog-how-to-use<span class="_">-a</span>-cakephp-api-as-the-data-backend-for-ember-in-30-minutes</div><div class="line">npm install</div><div class="line">ember serve</div></pre></td></tr></table></figure>
<p>Browse to <code>http://cakebox:4200</code></p>
<h2 id="2-Requirements"><a href="#2-Requirements" class="headerlink" title="2. Requirements"></a>2. Requirements</h2><p>This tutorial requires the installation of
<a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs</a>,
<a href="https://ember-cli.com/" target="_blank" rel="external">ember-cli</a>,
<a href="http://phantomjs.org/" target="_blank" rel="external">phantomjs</a>,
and
<a href="https://bower.io/" target="_blank" rel="external">bower</a> on your server.</p>
<p>Since every system will have different requirements you should consider the following
instructions (taken from an installation on <a href="https://github.com/alt3/cakebox" target="_blank" rel="external">cakebox</a>
using Ubuntu 14.04) as nothing more than an example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span>L https://deb.nodesource.com/setup_6.x | sudo -E bash -</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install nodejs</div><div class="line">npm install -g ember-cli</div><div class="line">npm install -g phantomjs</div><div class="line">npm install -g bower</div></pre></td></tr></table></figure>
<h2 id="3-Creating-the-Ember-application"><a href="#3-Creating-the-Ember-application" class="headerlink" title="3. Creating the Ember application"></a>3. Creating the Ember application</h2><p>Ember comes with the <code>ember</code> CLI command which is similar to CakePHP’s <code>cake</code> and used
to generate applications, routes, models, etc. We will generate a fresh Ember application
named <code>ember-frontend</code> by running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /path/to/your/projects/directory</div><div class="line">ember new ember-frontend</div><div class="line"><span class="built_in">cd</span> ember-frontend</div></pre></td></tr></table></figure>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/01-ember-cli-new-application.png" alt="Screenshot of ember-cli generating the Ember application" title="Screenshot of ember-cli generating the Ember application">
<h2 id="4-Meeting-Ember"><a href="#4-Meeting-Ember" class="headerlink" title="4. Meeting Ember"></a>4. Meeting Ember</h2><p>Since this is basically all that is needed to create a new Ember application this might be a good moment
to take a quick look at the files and folders to get a quick first impression of the application structure.</p>
<p>To see your Ember application in action run <code>ember serve</code> and browse to <code>http://cakebox:4200</code>:</p>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/02-ember-welcome-page.png" alt="Screenshot of Ember welcome page" title="Screenshot of Ember welcome page">
<p>To continue this tutorial without the Tomster mascotte
open <code>templates/application.hbs</code> and remove the following line:</p>
<pre><code>{{welcome-page}}
</code></pre><h2 id="5-Creating-the-Ember-Data-Adapter"><a href="#5-Creating-the-Ember-Data-Adapter" class="headerlink" title="5. Creating the Ember Data Adapter"></a>5. Creating the Ember Data Adapter</h2><p>Ember Data’s (now default) <a href="http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html" target="_blank" rel="external">JSONAPIAdapter</a>
is the awesome/amazing glue responsible for automatically constructing all
JSON API calls required to communicate with your API backend. Generate it by running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ember generate adapter application</div></pre></td></tr></table></figure>
<p>Now open <code>app/adapters/application.js</code> and add the connection settings pointing to your API
so it looks like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">'ember-data'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.JSONAPIAdapter.extend(&#123;</div><div class="line">  <span class="attr">host</span>: <span class="string">"http://cake3api.app"</span>,</div><div class="line">  <span class="attr">namespace</span>: <span class="string">"api"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>Please note that we MUST set the namespace here because we created a CakePHP prefixed route in <a href="http://www.bravo-kernel.com/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/" target="_blank" rel="external">tutorial #3</a></em></p>
<h2 id="6-Creating-the-Ember-models"><a href="#6-Creating-the-Ember-models" class="headerlink" title="6. Creating the Ember models"></a>6. Creating the Ember models</h2><p>Ember Data must somehow be made aware of the models/resources available in our CakePHP API
(and their relationships) and amazingly enough all that is required for that to happen is
generating an “Ember model”.</p>
<p>Since our API is serving cocktails we create a corresponding Ember model by running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ember generate model cocktail</div></pre></td></tr></table></figure>
<p>Now open <code>app/models/coctkail.js</code> and specify which attributes you want to be available in the frontend:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">'ember-data'</span>;</div><div class="line"><span class="keyword">import</span> attr <span class="keyword">from</span> <span class="string">'ember-data/attr'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</div><div class="line">  <span class="attr">name</span>: attr(),</div><div class="line">  <span class="attr">description</span>: attr(),</div><div class="line">  <span class="attr">created</span>: attr(),</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>Do not forget to add <code>ember-data/attr</code></em></p>
<h2 id="7-Adding-the-index-route"><a href="#7-Adding-the-index-route" class="headerlink" title="7. Adding the index route"></a>7. Adding the index route</h2><p>To start with Ember uses “routes” which are comparable with CakePHP controllers
and <a href="http://handlebarsjs.com/" target="_blank" rel="external">Handlebars</a> “templates” which are comparable with
CakePHP templates. To generate the route we will use to hook into our API’s <code>index</code>
action we run:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ember generate route cocktails</div></pre></td></tr></table></figure>
<p>This will:</p>
<ul>
<li>create <code>app/routes/cocktails.js</code></li>
<li>create <code>app/templates/cocktails.hbs</code></li>
<li>update <code>app/router.js</code> to include the newly generated route</li>
</ul>
<p>Now open <code>app/routes/cocktails.js</code> and add our model so <strong>all</strong> cocktail data is
automatically fetched from our API when accessing this route/page.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</div><div class="line">  model() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.store.findAll(<span class="string">'cocktail'</span>);</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>All that is needed now is updating the template so it will show the
fetched data so let’s update <code>app/templates/cocktails.js</code> and make
it look like this:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Ember Data JSONAPIAdapter - Index route<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  &#123;&#123;#each model as |cocktail|&#125;&#125;</div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;cocktail.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;cocktail.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;cocktail.description&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;cocktail.created&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  &#123;&#123;/each&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Done, seriously.</p>
<h3 id="Verify"><a href="#Verify" class="headerlink" title="Verify"></a>Verify</h3><p>Now that you have created your first API-driven page verify Ember is actually fetching from your API:</p>
<ul>
<li>open Chrome</li>
<li>browse to your Ember application at <code>cakebox:4200/cocktails</code></li>
<li>make sure it displays the records as found in your CakePHP database:</li>
</ul>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/03-ember-showing-data-from-cakephp-api-index-action.png" alt="Ember showing data fetched from CakePHP API" title="Ember showing data fetched from CakePHP API">
<h2 id="8-Using-Ember-Inspector"><a href="#8-Using-Ember-Inspector" class="headerlink" title="8. Using Ember Inspector"></a>8. Using Ember Inspector</h2><p>The Ember Inspector in Chrome will help you get a better understanding of the underlying
API magic so let’s zoom in on that subject before continuing.</p>
<h3 id="Inspecting-API-Resources"><a href="#Inspecting-API-Resources" class="headerlink" title="Inspecting API Resources"></a>Inspecting API Resources</h3><p>The API resources used by your Ember frontend can be found by:</p>
<ul>
<li>opening chrome</li>
<li>pressing F12</li>
<li>selecting the <code>Network</code> tab</li>
<li>browsing to <code>cakebox:4200/cocktails</code></li>
</ul>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/04-ember-inspector-network.png" alt="Ember Inspector API network resource" title="Ember Inspector API network resource">
<ul>
<li><strong>upper arrow</strong>: tells us that a network resource named <code>cocktails</code> was fetched
using jquery (executed by Ember Data)</li>
<li><strong>lower arrow</strong>: tells us Ember Inspector is recognizing the page as valid Ember</li>
</ul>
<h3 id="Inspecting-API-Resource-Headers"><a href="#Inspecting-API-Resource-Headers" class="headerlink" title="Inspecting API Resource Headers"></a>Inspecting API Resource Headers</h3><p>To zoom in on the API resource and inspect the headers simply click <code>cocktails</code> which
should give you something like:</p>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/05-ember-inspector-api-resource-zoom-headers.png" alt="Ember Inspector zoom in on API network resource headers" title="Ember Inspector zoom in on API network resource headers">
<ul>
<li><strong>upper arrow</strong>: proves the resource is fetched from our CakePHP API</li>
<li><strong>center arrow</strong>: tells us the CakePHP API is responding with JSON API</li>
<li><strong>lower arrow</strong>: tells us Ember Data is automatically sending the JSON API Accept Header with all requests</li>
</ul>
<h3 id="Inspecting-the-API-response"><a href="#Inspecting-the-API-response" class="headerlink" title="Inspecting the API response"></a>Inspecting the API response</h3><p>You will be able to see the JSON API response produced by the API by clicking
the <code>Response</code> tab. This should look more than familiar since you have implemented
JSON API during the previous tutorial (pretty cool).</p>
<p><em>FYI the <code>Preview</code> tab will show the exact same results but objectied for easy click-through.</em></p>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/06-ember-inspector-api-resource-response.png" alt="Ember Inspector show API response" title="Ember Inspector show API response">
<h3 id="Inspecting-Ember-Data-records"><a href="#Inspecting-Ember-Data-records" class="headerlink" title="Inspecting Ember Data records"></a>Inspecting Ember Data records</h3><p>The Ember Inspector is really useful when we want to see how our
API data is being used by Ember. To make this more clear:</p>
<ul>
<li>select the <code>Ember</code> tab</li>
<li>select the <code>Data</code> container</li>
<li>select the <code>cocktail</code> model type</li>
</ul>
<p>You should notice two things:</p>
<ul>
<li>the attributes are corresponding to the Ember <code>cocktail</code> model we created earlier</li>
<li>and are thus missing the <code>modified</code> attribute we excluded (even though our API is servicing it)</li>
</ul>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/07-ember-inspector-api-data-main.png" alt="Ember Inspector Ember Data main" title="Ember Inspector Ember Data main">
<h3 id="Inspecting-Ember-Data-record-details"><a href="#Inspecting-Ember-Data-record-details" class="headerlink" title="Inspecting Ember Data record details"></a>Inspecting Ember Data record details</h3><p>Every record contains very detailed information which is revealed when clicking a record.</p>
<p><em>Relationship information (<code>belongsTo</code>, <code>hasMany</code>) will appear in the <code>Flags</code> section when applicable.</em></p>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/08-ember-inspector-api-record-details.png" alt="Ember Inspector Ember Data record details" title="Ember Inspector Ember Data record details">
<h2 id="9-Adding-the-delete-action"><a href="#9-Adding-the-delete-action" class="headerlink" title="9. Adding the delete action"></a>9. Adding the delete action</h2><p>Ember uses <a href="https://guides.emberjs.com/v1.13.0/templates/actions/" target="_blank" rel="external">template actions</a>
to let users interact with data so let’s add one
that will automatically construct and send the correct <code>DELETE</code> request
to our API.</p>
<p>Moment, since all template actions require a corresponding (named) event in the routes file
first open <code>app/routes/cocktails.js</code> and update it to look like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</div><div class="line">  model() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.store.findAll(<span class="string">'cocktail'</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">actions</span>: &#123;</div><div class="line">    deleteCocktail(cocktail) &#123;</div><div class="line">      <span class="keyword">let</span> confirmation = confirm(<span class="string">'Are you sure?'</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (confirmation) &#123;</div><div class="line">        cocktail.destroyRecord();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Now that the <code>deleteCocktail</code> event/action is in place all that is left to do is updating
the template with a button so users can trigger the action. To do so, open <code>templates/application.hbs</code>
and update it to look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;h3&gt;Ember showing data fetched from CakePHP API&apos;s index action&lt;/h3&gt;</div><div class="line">&lt;table&gt;</div><div class="line">  &#123;&#123;#each model as |cocktail|&#125;&#125;</div><div class="line">      &lt;tr&gt;</div><div class="line">          &lt;td&gt;&#123;&#123;cocktail.id&#125;&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;&#123;&#123;cocktail.name&#125;&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;&#123;&#123;cocktail.description&#125;&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;&#123;&#123;cocktail.created&#125;&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;&lt;button class=&quot;button&quot; &#123;&#123;action &apos;deleteCocktail&apos; cocktail&#125;&#125;&gt;Delete&lt;/button&gt;&lt;/td&gt;</div><div class="line">      &lt;/tr&gt;</div><div class="line">  &#123;&#123;/each&#125;&#125;</div><div class="line">&lt;/table&gt;</div><div class="line"></div><div class="line">&#123;&#123;outlet&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="Verify-1"><a href="#Verify-1" class="headerlink" title="Verify"></a>Verify</h3><p>Verify you are able to delete records in your API by using the Ember page by:</p>
<ul>
<li>opening Chrome</li>
<li>pressing F12</li>
<li>selecting the <code>Network</code> tab</li>
<li>browsing to your Ember application at <code>cakebox:4200/cocktails</code></li>
<li>making sure it now displays <code>Delete</code> buttons</li>
<li>pressing one of the <code>Delete</code> buttons (and confirming the delete)</li>
</ul>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/09-delete-action-page.png" alt="Ember delete action page" title="Ember delete action page">
<p>If things went well:</p>
<ul>
<li>Ember automagically made two requests to your API (see the Chrome <code>Network</code> tab):<ul>
<li>one for the CORS <code>OPTIONS</code></li>
<li>one for the actual <code>DELETE</code></li>
</ul>
</li>
<li>clicking those requests should now produce information that makes sense to you</li>
<li>the record was deleted from your CakePHP database</li>
<li>refreshing the page should no longer show the deleted record</li>
<li>you should by now be quite impressed with how easy that actually was</li>
</ul>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/10-delete-action-two-requests.png" alt="Ember delete action two requests" title="Ember delete action two requests">
<h2 id="10-Adding-the-add-action"><a href="#10-Adding-the-add-action" class="headerlink" title="10. Adding the add action"></a>10. Adding the add action</h2><p>Without going into details we will create an
<a href="https://guides.emberjs.com/v2.11.0/tutorial/subroutes/#toc-toggle" target="_blank" rel="external">Ember nested route</a>
to create a dedicated page for our <code>add</code> action by running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ember generate route cocktails/add</div></pre></td></tr></table></figure>
<p>This will:</p>
<ul>
<li>create <code>app/routes/cocktails/add.js</code></li>
<li>create <code>app/templates/cocktails/add.hbs</code></li>
<li>add the nested route to <code>router/router.js</code></li>
</ul>
<p>Similar to the <code>delete</code> action we will first create a named event
so update <code>app/routes/cocktails/add.js</code> to look like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</div><div class="line">  model() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.store.createRecord(<span class="string">'cocktail'</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">actions</span>: &#123;</div><div class="line">    addCocktail(cocktail) &#123;</div><div class="line">      <span class="keyword">let</span> confirmation = confirm(<span class="string">'Are you sure?'</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (confirmation) &#123;</div><div class="line">        cocktail.save();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Open <code>app/templates/cocktails/add.hbs</code> and add this basic form 
the user will use to trigger the <code>addCocktail</code> action (rendered
into the <code>outlet</code> tag found in <code>app/templates/cocktails.hbs</code> btw):</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>New Cocktail:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name: &#123;&#123;input value=model.name&#125;&#125; <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Description: &#123;&#123;input value=model.description&#125;&#125; <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span> &#123;&#123;<span class="attr">action</span> '<span class="attr">addCocktail</span>' <span class="attr">model</span>&#125;&#125;&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Verify-2"><a href="#Verify-2" class="headerlink" title="Verify"></a>Verify</h3><p>Verify you can add a new record to your CakePHP database using your
Ember frontend by:</p>
<ul>
<li>browsing to <code>cakebox:4200/cocktails/add</code></li>
<li>making sure the input fields are there</li>
<li>filling the form fields <code>name</code> and <code>description</code></li>
<li>pressing the <code>Add</code> button</li>
</ul>
<p>If things went well:</p>
<ul>
<li>Ember automagically made two requests to your API (see the Chrome <code>Network</code> tab):<ul>
<li>one for the CORS <code>OPTIONS</code></li>
<li>one for the actual <code>POST</code> request</li>
</ul>
</li>
<li>you should be able to see the new record in your CakePHP database</li>
</ul>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/11-add-action-page.png" alt="Screenshot of Ember add action page" title="Screenshot of Ember add action page">
<h2 id="11-Adding-the-view-edit-actions"><a href="#11-Adding-the-view-edit-actions" class="headerlink" title="11. Adding the view/edit actions"></a>11. Adding the view/edit actions</h2><p>Almost there.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ember generate route cocktails/edit</div></pre></td></tr></table></figure>
<p>Update <code>app/routes/cocktails/edit.js</code> so it looks like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</div><div class="line">  model(params) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.get(<span class="string">'store'</span>).findRecord(<span class="string">'cocktail'</span>, params.id);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">actions</span>: &#123;</div><div class="line">    saveCocktail(country) &#123;</div><div class="line">      <span class="keyword">let</span> confirmation = confirm(<span class="string">'Are you sure?'</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (confirmation) &#123;</div><div class="line">        country.save();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>To handle the <code>id</code> parameter open <code>app/router.js</code> and replace 
<code>this.route(&#39;edit&#39;);</code> with:</p>
<pre><code>this.route(&apos;edit&apos;, { path: &quot;/edit/:id&quot; });
</code></pre><p>Update <code>app/templates/cocktails/edit.hbs</code> so it looks like this:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Edit existing Cocktail (id = &#123;&#123;model.id&#125;&#125;)<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;input value=model.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;input value=model.description&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button alert small"</span> &#123;&#123;<span class="attr">action</span> '<span class="attr">saveCocktail</span>' <span class="attr">model</span>&#125;&#125;&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p>All done, browse to <code>http://cakebox:4200/cocktails/edit/3</code> and verify that you can
view, edit and save the record.</p>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/12-view-edit-action-page.png" alt="Screenshot of Ember view/edit action page" title="Screenshot of Ember view/edit action page">
<h2 id="Bonus-Relational-Data"><a href="#Bonus-Relational-Data" class="headerlink" title="Bonus: Relational Data"></a>Bonus: Relational Data</h2><p>For simplicity’s sake we did not touch the subject in this tutorial but… Ember Data will
also (automatically) detect and handle your API’s <code>belongsTo</code> and <code>hasMany</code> relationships
as can seen in the following screenshot:</p>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/13-relationships.png" alt="Screenshot of Ember data relationships" title="Screenshot of Ember data relationships">
<p>Please consult the Ember documentation for more information but enabling the
above relationships was as easy as adding them to the 
Ember model like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> DS.Model.extend(&#123;</div><div class="line">  <span class="attr">name</span>: attr(),</div><div class="line">  <span class="attr">code</span>: attr(),</div><div class="line">  <span class="attr">native</span>: attr(),  </div><div class="line">  <span class="attr">currency</span>: belongsTo(<span class="string">'currency'</span>),</div><div class="line">  <span class="attr">cultures</span>: hasMany(<span class="string">'culture'</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Bonus-Validation-Errors"><a href="#Bonus-Validation-Errors" class="headerlink" title="Bonus: Validation Errors"></a>Bonus: Validation Errors</h2><p>Because your CakePHP API is producing JSON API compatible (validation)
errors… those are handled by Ember Data automatically as well, making 
them instantly availble in your frontend as can be seen in the 
screenshot below where:</p>
<ul>
<li>your API is returning the 422 validation error along with validation error messages</li>
<li>Ember Data picks up the validation messages and makes them avaible for display on the page</li>
</ul>
<p><br></p>
<img src="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/14-validation-errors.png" alt="Screenshot of Ember data validation errors" title="Screenshot of Ember data validation errors">
<h2 id="Getting-help"><a href="#Getting-help" class="headerlink" title="Getting help"></a>Getting help</h2><p>Both CakePHP and Ember have very friendly online communities that are more than willing to help
you out if you encounter any problems so make sure to join:</p>
<ul>
<li>the <a href="https://www.google.nl/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwivsN6Kq9TSAhVDExoKHTFXDuMQFggaMAA&amp;url=https%3A%2F%2Fcakesf.herokuapp.com%2F&amp;usg=AFQjCNF2de5Mi16W0okJJ9lsgy9JrDmiNQ&amp;bvm=bv.149397726,d.d2s" target="_blank" rel="external">CakePHP Slack group</a> or their
<a href="https://kiwiirc.com/client/irc.freenode.net#cakephp" target="_blank" rel="external">#cakephp IRC channel</a></li>
<li>the <a href="https://embercommunity.slack.com/" target="_blank" rel="external">Ember Slack group</a> or their <a href="https://kiwiirc.com/client/irc.freenode.net#emberjs" target="_blank" rel="external">#emberjs IRC channel</a></li>
</ul>
<h2 id="Additional-reading"><a href="#Additional-reading" class="headerlink" title="Additional reading"></a>Additional reading</h2><ul>
<li><a href="https://guides.emberjs.com/" target="_blank" rel="external">Ember.js - Guides and Tutorials</a></li>
<li><a href="http://voidcanvas.com/prefer-ember-js-angular-react-js/" target="_blank" rel="external">Why I prefer Ember.js over Angular &amp; React.js</a></li>
</ul>
<p><em>Eternal hat-tip to <a href="https://github.com/Phally" target="_blank" rel="external">Phally</a> for inspiring (and actually prototyping) this many years ago.</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this follow-up post to &lt;a href=&quot;/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/&quot;&gt;How to make your CakePHP 3 API produce JSON 
    
    </summary>
    
      <category term="cakephp" scheme="http://bravo-kernel.com/categories/cakephp/"/>
    
    
      <category term="cakephp" scheme="http://bravo-kernel.com/tags/cakephp/"/>
    
      <category term="api" scheme="http://bravo-kernel.com/tags/api/"/>
    
      <category term="ember" scheme="http://bravo-kernel.com/tags/ember/"/>
    
      <category term="jsonapi" scheme="http://bravo-kernel.com/tags/jsonapi/"/>
    
      <category term="crud" scheme="http://bravo-kernel.com/tags/crud/"/>
    
      <category term="emberjs" scheme="http://bravo-kernel.com/tags/emberjs/"/>
    
  </entry>
  
  <entry>
    <title>Installing PHP7, Composer and CodeSniffer on Windows 10 (for VSCode)</title>
    <link href="http://bravo-kernel.com/2017/03/installing-php7-composer-and-codesniffer-on-windows10-for-vscode/"/>
    <id>http://bravo-kernel.com/2017/03/installing-php7-composer-and-codesniffer-on-windows10-for-vscode/</id>
    <published>2017-03-12T18:00:00.000Z</published>
    <updated>2017-03-12T08:11:43.133Z</updated>
    
    <content type="html"><![CDATA[<p>This post will guide you through clean (non-polluting) Windows 10 installations
of PHP 7, Composer and PHP CodeSniffer 
and will show you how to integrate it all with Visual Studio Code as a bonus.</p>
<h2 id="1-Installing-PHP"><a href="#1-Installing-PHP" class="headerlink" title="1. Installing PHP"></a>1. Installing PHP</h2><p><a href="http://windows.php.net/download" target="_blank" rel="external">Download</a> one of the PHP binaries suitable for your system 
(this post will use
<a href="http://windows.php.net/downloads/releases/php-7.1.2-nts-Win32-VC14-x64.zip" target="_blank" rel="external">the 64-bit Thread Safe version of PHP 7.1.2</a>) and:</p>
<ul>
<li>extract the downloaded zip file</li>
<li>rename the resultant directory to <code>php-x64</code></li>
<li>move the renamed directory to <code>&quot;C:\Program Files&quot;</code></li>
</ul>
<p><em>FYI: may choose any other directory name but this post will assume PHP installed in <code>&quot;C:\Program Files\php-x64&quot;</code></em></p>
<h3 id="Enable-OpenSSL"><a href="#Enable-OpenSSL" class="headerlink" title="Enable OpenSSL"></a>Enable OpenSSL</h3><p>PHP will not have OpenSSL enabled by default which will cause Composer errors
later on so we might as well enable it right now by opening a
Command Prompt (with elevated admin permissions) and running:</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> "C:\Program Files\php-x64"</div><div class="line">cp php.ini-production php.ini</div></pre></td></tr></table></figure>
<p>Close the Command Prompt and open <code>&quot;C:\Program Files\php-x64\php.ini&quot;</code> with
your editor to uncomment the following lines:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">extension_dir</span> = <span class="string">"ext"</span></div><div class="line"><span class="attr">extension</span>=php_openssl.dll</div></pre></td></tr></table></figure>
<h2 id="2-Installing-Composer"><a href="#2-Installing-Composer" class="headerlink" title="2. Installing Composer"></a>2. Installing Composer</h2><p>Download and run the Composer <a href="https://getcomposer.org/download/" target="_blank" rel="external">Windows installer</a>.</p>
<p>Make sure that the installer detects your PHP installation before completing the installation:</p>
<p><br></p>
<img src="/2017/03/installing-php7-composer-and-codesniffer-on-windows10-for-vscode/composer-install-verify-php-detection.png" alt="Screenshot of Composer installation detecting PHP" title="Screenshot of Composer installation detecting PHP">
<p>Good to know:</p>
<ul>
<li>the composer binary is found in <code>&quot;C:\ProgramData\ComposerSetup\bin&quot;</code></li>
<li>the <code>PATH</code> (system) environment variable has been updated to include the above bin directory</li>
</ul>
<h3 id="Change-the-global-install-path"><a href="#Change-the-global-install-path" class="headerlink" title="Change the global install path"></a>Change the global install path</h3><p>By default Composer will install <strong>global</strong> packages into
<code>C:\Users\%username%\AppData\Roaming</code> which can become quite cluttering
so we change it.</p>
<ol>
<li><p>Create new directory <code>&quot;C:\Program Files\php-x64\composer&quot;</code></p>
</li>
<li><p>Open the system control panel by pressing <code>WINDOWS KEY</code>+<code>PAUSE/BREAK KEY</code></p>
</li>
<li><p>Select <code>Advanced system Settings</code></p>
</li>
<li><p>Select <code>Environmental variables</code></p>
</li>
<li><p>Under <code>System Variables</code>, press <code>New</code> and enter the following settings:</p>
<p><br></p>
<img src="/2017/03/installing-php7-composer-and-codesniffer-on-windows10-for-vscode/composer-global-install-path-env.png" alt="Screenshot of new system variable" title="Screenshot of new system variable">
</li>
<li><p>Select <code>OK</code> to round up this step</p>
</li>
</ol>
<h3 id="Add-vendor-bin-directory-to-PATH"><a href="#Add-vendor-bin-directory-to-PATH" class="headerlink" title="Add vendor bin directory to PATH"></a>Add vendor bin directory to PATH</h3><p>To make sure your system will be able to find composer installed binaries like <code>phpcs</code>
we will need to add the global vendor directory to the system <code>PATH</code> environment
variable.</p>
<ol>
<li><p>Open the system control panel (WINDOWS KEY +PAUSE/BREAK)</p>
</li>
<li><p>Select <code>Advanced system Settings</code></p>
</li>
<li><p>Select <code>Environmental variables</code></p>
</li>
<li><p>Under <code>System Variables</code>, select existing <code>Path</code> variable</p>
</li>
<li><p>Select <code>Edit</code> </p>
</li>
<li><p>Select <code>New</code> and enter <code>C:\Program Files\php-x64\composer\vendor\bin</code> like shown below:</p>
<p><br></p>
<img src="/2017/03/installing-php7-composer-and-codesniffer-on-windows10-for-vscode/composer-global-vendor-bin-path-env.png" alt="Screenshot of editing existing PATH system variable" title="Screenshot of editing existing PATH system variable">
</li>
<li><p>Press <code>OK</code> trice to apply the setting</p>
</li>
</ol>
<p>Make sure to close all open any CMD boxes or they will not
be aware of the new environment variable.</p>
<h2 id="3-Installing-PHP-CodeSniffer"><a href="#3-Installing-PHP-CodeSniffer" class="headerlink" title="3. Installing PHP_CodeSniffer"></a>3. Installing PHP_CodeSniffer</h2><p>Open a Command Prompt (without elevated permissions) and run:</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">composer global require "squizlabs/php_codesniffer=*"</div><div class="line">phpcs --version</div></pre></td></tr></table></figure>
<h2 id="4-Installing-additional-Coding-Standards"><a href="#4-Installing-additional-Coding-Standards" class="headerlink" title="4. Installing additional Coding Standards"></a>4. Installing additional Coding Standards</h2><p>Installation instructions will differ per additional coding standard
so we will just use <a href="https://github.com/cakephp/cakephp-codesniffer" target="_blank" rel="external">cakephp-codesniffer</a>
as an example here.</p>
<p>Open your global <code>C:\Program Files\php-x64\composer\composer.json</code> file and manually add
the cakephp-sniffer package so it looks like this:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"require"</span>: &#123;</div><div class="line">        <span class="attr">"squizlabs/php_codesniffer"</span>: <span class="string">"*"</span>,</div><div class="line">        <span class="attr">"cakephp/cakephp-codesniffer"</span>: <span class="string">"2.*"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now open a Command Prompt (without elevated permissions) and run the following
commands to install the coding standard and make the path known to phcs:</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">composer global update</div><div class="line">phpcs --config-<span class="built_in">set</span> installed_paths "C:\Program Files\php-x64\composer\vendor\cakephp\cakephp-codesniffer"</div><div class="line">phpcs --config-show</div></pre></td></tr></table></figure>
<p>There is no need to configure the default coding standard as this will be handled on a 
per-project basis inside Visual Studio Code but you are free to do so anyways by
running:</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phpcs --config-<span class="built_in">set</span> default_standard CakePHP</div></pre></td></tr></table></figure>
<p><em>FYI: all Sniffer settings also in C:\Program Files\php-x64\composer\vendor\squizlabs\php_codesniffer\CodeSniffer.conf</em></p>
<h2 id="5-Reboot-your-computer"><a href="#5-Reboot-your-computer" class="headerlink" title="5. Reboot your computer"></a>5. Reboot your computer</h2><p>To be absolutely sure all programs and services are aware of the new environment
variables you should now reboot your computer. <strong>If you are not using Visual Studio
Code</strong> you may also skip the rest of this tutorial.</p>
<h2 id="6-Integrating-Composer-with-VSCode"><a href="#6-Integrating-Composer-with-VSCode" class="headerlink" title="6. Integrating Composer with VSCode"></a>6. Integrating Composer with VSCode</h2><p><a href="https://github.com/ikappas" target="_blank" rel="external">Ioannis Kappas</a> has created
a very neat <a href="https://marketplace.visualstudio.com/items?itemName=ikappas.composer" target="_blank" rel="external">VSCode composer plugin</a>
that allows you to lint <code>composer.json</code> files. To set it up:</p>
<ol>
<li><p>Open Visual Studio Code</p>
</li>
<li><p>Press CTRL+P</p>
</li>
<li><p>Paste <code>ext install Composer publisher:&quot;Ioannis Kappas&quot;</code></p>
</li>
<li><p>Install the plugin by clicking that green button</p>
</li>
<li><p>Reload the window by clicking that blue button to activate the plugin</p>
</li>
<li><p>Open the settings window (File &gt; Preferences &gt; Settings) </p>
</li>
<li><p>Add the following line to the <code>USER SETTINGS</code> section:</p>
<p><code>&quot;composer.executablePath&quot;: &quot;c:\\ProgramData\\ComposerSetup\\bin\\composer.bat&quot;</code></p>
</li>
</ol>
<h3 id="Verify"><a href="#Verify" class="headerlink" title="Verify"></a>Verify</h3><p>To verify the plugin is functioning properly:</p>
<ul>
<li><p>Open a <code>composer.json</code> file in Visual Studio Code</p>
</li>
<li><p>Press F1</p>
</li>
<li><p>Type <code>validate</code></p>
</li>
<li><p>Select <code>Composer: Validate</code> and pressing enter</p>
</li>
<li><p>If things went well you should see something like this:</p>
<p><br></p>

</li>
</ul>
<h2 id="7-Integrating-PHP-CodeSniffer-with-VSCode"><a href="#7-Integrating-PHP-CodeSniffer-with-VSCode" class="headerlink" title="7. Integrating PHP CodeSniffer with VSCode"></a>7. Integrating PHP CodeSniffer with VSCode</h2><p>The <a href="https://marketplace.visualstudio.com/items?itemName=ikappas.phpcs" target="_blank" rel="external">VSCode phpcs plugin</a>
is another great add-on by <a href="https://github.com/ikappas" target="_blank" rel="external">Ioannis Kappas</a>
and allows you to check your code against various coding standards.
To set ip up:</p>
<ol>
<li><p>Open Visual Studio Code</p>
</li>
<li><p>Press CTRL+P</p>
</li>
<li><p>Paste <code>ext install phpcs publisher:&quot;Ioannis Kappas&quot;</code></p>
</li>
<li><p>Install the plugin by clicking that green button</p>
</li>
<li><p>Reload the window by clicking that blue button to activate the plugin</p>
<p><em>Please note that code sniffing will be active from this point on.</em></p>
</li>
</ol>
<h3 id="Configure"><a href="#Configure" class="headerlink" title="Configure"></a>Configure</h3><p>Even though you are free to use your own
<a href="https://marketplace.visualstudio.com/items?itemName=ikappas.phpcs" target="_blank" rel="external">configuration strategy</a>
we will configure the plugin to <strong>disable code sniffing by default</strong>,
basically requiring you to enable it on a per project/VSCode workspace basis.</p>
<p>To disable sniffing on the global level:</p>
<ol>
<li><p>Open Visual Studio Code</p>
</li>
<li><p>Open the settings window (File &gt; Preferences &gt; Settings)</p>
</li>
<li><p>Add the following line to the <code>USER SETTINGS</code> section:</p>
<p><code>&quot;phpcs.enable&quot;: false</code></p>
</li>
</ol>
<p>To enable code sniffing for your project/workspace:</p>
<ol>
<li><p>Open Visual Studio Code</p>
</li>
<li><p>Open one of your projects/workspaces</p>
</li>
<li><p>Open the settings window (File &gt; Preferences &gt; Settings)</p>
</li>
<li><p>Add the following lines to the <code>WORKSPACE SETTINGS</code> section:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"phpcs.enable": true,</div><div class="line">"phpcs.standard": "CakePHP",</div><div class="line">"phpcs.ignore": "config, webroot"</div></pre></td></tr></table></figure>
<p><em>Please note that the ignore part is optional and that non-existing directories/files will cause errors.</em></p>
</li>
</ol>
<h3 id="Verify-1"><a href="#Verify-1" class="headerlink" title="Verify"></a>Verify</h3><p>To verify the plugin is functioning properly:</p>
<ol>
<li><p>Open one of your projects with Visual Studio Code</p>
</li>
<li><p>Open one of your <code>.php</code> files</p>
</li>
<li><p>Make a change that will trigger a sniffer violation</p>
</li>
<li><p>Save the file (realtime sniffing not supported yet)</p>
</li>
<li><p>You should see a red tilde (<code>~</code>) explaining the sniff violation when hovered:</p>
<img src="/2017/03/installing-php7-composer-and-codesniffer-on-windows10-for-vscode/vscode-phpcs-hover-tilde.png" alt="Screenshot of phpcs violation when hovering tilde" title="Screenshot of phpcs violation when hovering tilde">
</li>
<li><p>The <code>Problems</code> window (View &gt; Problems) should display a summary of all phpcs violations:</p>
<img src="/2017/03/installing-php7-composer-and-codesniffer-on-windows10-for-vscode/vscode-phpcs-problems-output.png" alt="Screenshot of VSCode Problems window listing phpcs violations" title="Screenshot of VSCode Problems window listing phpcs violations">
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post will guide you through clean (non-polluting) Windows 10 installations
of PHP 7, Composer and PHP CodeSniffer 
and will show you
    
    </summary>
    
      <category term="sysop" scheme="http://bravo-kernel.com/categories/sysop/"/>
    
    
      <category term="cakephp" scheme="http://bravo-kernel.com/tags/cakephp/"/>
    
      <category term="composer" scheme="http://bravo-kernel.com/tags/composer/"/>
    
      <category term="phpcs" scheme="http://bravo-kernel.com/tags/phpcs/"/>
    
      <category term="windows10" scheme="http://bravo-kernel.com/tags/windows10/"/>
    
      <category term="sysop" scheme="http://bravo-kernel.com/tags/sysop/"/>
    
      <category term="vscode" scheme="http://bravo-kernel.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>How to make your CakePHP 3 API produce JSON API</title>
    <link href="http://bravo-kernel.com/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/"/>
    <id>http://bravo-kernel.com/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/</id>
    <published>2017-03-10T20:10:24.000Z</published>
    <updated>2017-03-22T13:43:08.890Z</updated>
    
    <content type="html"><![CDATA[<p>In this follow-up post to
<a href="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/">How to add JWT Authentication to a CakePHP 3 REST API</a>
we will update our existing API so it will adhere to the
<a href="http://jsonapi.org/" target="_blank" rel="external">JSON API specification</a> giving you the
benefits of standardization and instant compatibility with JSON API supporting tools and frameworks
like <a href="https://github.com/emberjs/data#a-brief-note-on-adapters" target="_blank" rel="external">Ember Data’s JSONAPIAdapter</a>.</p>
<p><a href="https://app.getpostman.com/run-collection/197398a609a6d233a8c2" target="_blank" rel="external">&gt; API methods used in this post shared with Postman</a></p>
<h2 id="Before-We-Begin"><a href="#Before-We-Begin" class="headerlink" title="Before We Begin"></a>Before We Begin</h2><p>This is part five of the CakePHP 3 REST API tutorial series:</p>
<ol>
<li><a href="/2015/04/how-to-build-a-cakephp-3-rest-api-in-minutes/">How to build a CakePHP 3 REST API in minutes</a></li>
<li><a href="http://cakebox:4000/2015/04/how-to-use-a-cakephp-3-rest-api/" target="_blank" rel="external">How to use a CakePHP 3 REST API</a></li>
<li><a href="/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/">How to prefix route a CakePHP 3 REST API</a></li>
<li><a href="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/">How to add JWT Authentication to a CakePHP 3 REST API</a></li>
<li>How to make your CakePHP 3 API produce JSON API</li>
<li><a href="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/">How to use a CakePHP API as the data backend for Ember in 30 minutes</a></li>
</ol>
<p>Before starting this tutorial either:</p>
<ul>
<li>complete the previous tutorial</li>
<li>start fresh by using these
<a href="https://github.com/bravo-kernel/application-examples/tree/master/blog-how-to-make-your-cakephp-3-api-produce-jsonapi" target="_blank" rel="external">end-state application sources</a>,
composer installing and running the database migration</li>
</ul>
<h2 id="1-Install-Neomerx-jsonapi"><a href="#1-Install-Neomerx-jsonapi" class="headerlink" title="1. Install Neomerx/jsonapi"></a>1. Install Neomerx/jsonapi</h2><p>The Crud JsonApiListener used to produce the JSON API
depends on the <a href="https://github.com/neomerx/json-api" target="_blank" rel="external">neomerx/jsonapi</a>
package so install that first by running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require neomerx/json-api:^0.8.10</div></pre></td></tr></table></figure>
<h2 id="2-Upgrade-project-packages"><a href="#2-Upgrade-project-packages" class="headerlink" title="2. Upgrade project packages"></a>2. Upgrade project packages</h2><p>To make sure your API is using an up-to-date version of CakePHP and the 
required version of the Crud plugin now update your project’s
composer packages by running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer update</div></pre></td></tr></table></figure>
<blockquote>
<p>Please note that the Crud JsonApiListener is not available in Crud releases prior to 4.4.0.</p>
</blockquote>
<h2 id="3-Disable-JWT-authentication"><a href="#3-Disable-JWT-authentication" class="headerlink" title="3. Disable JWT authentication"></a>3. Disable JWT authentication</h2><p>Since JWT authentication is unrelated to JSON API we will disable it by 
removing the related lines in <code>src/Controller/Api/AppController</code>
which should leave you with a file looking like this:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>\<span class="title">Api</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Controller</span>\<span class="title">Controller</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Event</span>\<span class="title">Event</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * AppController specific to API resources</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">use</span> \<span class="title">Crud</span>\<span class="title">Controller</span>\<span class="title">ControllerTrait</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::initialize();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;loadComponent(<span class="string">'RequestHandler'</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;loadComponent(<span class="string">'Crud.Crud'</span>, [</div><div class="line">            <span class="string">'actions'</span> =&gt; [</div><div class="line">                <span class="string">'Crud.Index'</span>,</div><div class="line">                <span class="string">'Crud.View'</span>,</div><div class="line">                <span class="string">'Crud.Add'</span>,</div><div class="line">                <span class="string">'Crud.Edit'</span>,</div><div class="line">                <span class="string">'Crud.Delete'</span></div><div class="line">            ],</div><div class="line">            <span class="string">'listeners'</span> =&gt; [</div><div class="line">                <span class="string">'Crud.Api'</span>,</div><div class="line">                <span class="string">'Crud.ApiPagination'</span>,</div><div class="line">                <span class="string">'Crud.ApiQueryLog'</span></div><div class="line">            ]</div><div class="line">        ]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Even though the CakePHP and Crud upgrades were <strong>totally
transparent</strong> while writing this post this might be a good
moment to verify that your API’s <code>cocktails</code> endpoint is
still producing the expected results using GET, POST, etc.</p>
</blockquote>
<h2 id="3-Enable-JSON-API"><a href="#3-Enable-JSON-API" class="headerlink" title="3. Enable JSON API"></a>3. Enable JSON API</h2><p>All that is needed now to make your API produce JSON API is opening
<code>src/Controller/Api/AppController</code> and replacing the <code>Crud.Api</code>
listener with <code>Crud.JsonAPi</code> so it looks like:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'listeners'</span> =&gt; [</div><div class="line">    <span class="string">'Crud.JsonApi'</span>,</div><div class="line">    <span class="string">'Crud.ApiPagination'</span>,</div><div class="line">    <span class="string">'Crud.ApiQueryLog'</span></div><div class="line">]</div></pre></td></tr></table></figure>
<p>All done, seriously.</p>
<h2 id="4-Using-the-new-API"><a href="#4-Using-the-new-API" class="headerlink" title="4. Using the new API"></a>4. Using the new API</h2><p>Please note that the JsonApiListener documentation contains very detailed
<a href="http://crud.readthedocs.io/en/latest/listeners/jsonapi.html#response-formats" target="_blank" rel="external">usage descriptions</a>
and since there <strong>no point in duplicating them</strong> here we will
provide you with just two basic examples to get you going.</p>
<blockquote>
<p>The <a href="https://app.getpostman.com/run-collection/197398a609a6d233a8c2" target="_blank" rel="external">Postman collection</a>
contains examples of <code>index</code>, <code>view</code>, <code>add</code>, <code>edit</code> and <code>delete</code>.</p>
</blockquote>
<p><strong>Never forget:</strong></p>
<ul>
<li>ALL requests to your new API MUST use the <code>application/vnd.api+json</code> Accept Header</li>
<li>ALL requests with post data MUST use the <code>application/vnd.api+json</code> Content-Type Header</li>
</ul>
<h3 id="View-action-GET"><a href="#View-action-GET" class="headerlink" title="View action (GET)"></a>View action (GET)</h3><p>For this example we are in the mood for a Mojito so we query 
<code>http://cake3api.app/cocktails/3</code> making sure we are using:</p>
<ul>
<li><strong>HTTP Method</strong> <code>GET</code></li>
<li><strong>Accept Header</strong> <code>application/vnd.api+json</code></li>
</ul>
<img src="/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/api-request-headers-view.png" alt="API Request Headers for view action" title="API Request Headers for view action">
<p>If things went well your API should return Status Code 200 (Success) with a response body in
JSON API format looking similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"data"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"cocktails"</span>,</div><div class="line">    <span class="attr">"id"</span>: <span class="string">"3"</span>,</div><div class="line">    <span class="attr">"attributes"</span>: &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Mojito"</span>,</div><div class="line">      <span class="attr">"description"</span>: <span class="string">"Rum based"</span>,</div><div class="line">      <span class="attr">"created"</span>: <span class="string">"2015-04-11T09:52:01+00:00"</span>,</div><div class="line">      <span class="attr">"modified"</span>: <span class="literal">null</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"links"</span>: &#123;</div><div class="line">      <span class="attr">"self"</span>: <span class="string">"/api/cocktails/3"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Add-action-POST"><a href="#Add-action-POST" class="headerlink" title="Add action (POST)"></a>Add action (POST)</h3><p>To create a new cocktail send a JSON API request to
<code>http://cake3api.app/cocktails</code> making sure you are using:</p>
<ul>
<li><strong>HTTP Method</strong> <code>GET</code></li>
<li><strong>Accept Header</strong> <code>application/vnd.api+json</code></li>
<li><strong>Content-Type Header</strong> <code>application/vnd.api+json</code></li>
</ul>
<img src="/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/api-request-headers-add.png" alt="API Request Headers for add action" title="API Request Headers for add action">
<p>Also make sure to set the full or partial body data in (absolutely) correct JSON API format, e.g:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"data"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"cocktails"</span>,</div><div class="line">    <span class="attr">"attributes"</span>: &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Some cocktail"</span>,</div><div class="line">      <span class="attr">"description"</span>: <span class="string">"Some description"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now send the request.</p>
<p>If things went well your API should return Status Code 201 (Success) with a response body in
JSON API format looking similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"data"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"cocktails"</span>,</div><div class="line">    <span class="attr">"id"</span>: <span class="string">"24"</span>,</div><div class="line">    <span class="attr">"attributes"</span>: &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Some name"</span>,</div><div class="line">      <span class="attr">"description"</span>: <span class="string">"None inspired description"</span>,</div><div class="line">      <span class="attr">"created"</span>: <span class="string">"2017-03-16T19:01:57+00:00"</span>,</div><div class="line">      <span class="attr">"modified"</span>: <span class="string">"2017-03-16T19:01:57+00:00"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"links"</span>: &#123;</div><div class="line">      <span class="attr">"self"</span>: <span class="string">"/api/cocktails/24"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-Enabling-CORS-middleware"><a href="#5-Enabling-CORS-middleware" class="headerlink" title="5. Enabling CORS middleware"></a>5. Enabling CORS middleware</h2><p>Your API will be pretty useless if people (from other domains) won’t be able to use it
so let’s enable it right now along with CakePHP’s
<a href="https://book.cakephp.org/3.0/en/controllers/middleware.html" target="_blank" rel="external">new middleware functionality</a>
by following the book’s <a href="https://book.cakephp.org/3.0/en/controllers/middleware.html#adding-the-new-http-stack-to-an-existing-application" target="_blank" rel="external">step-by-step instructions</a>
:</p>
<ol>
<li>update <code>webroot/index.php</code></li>
<li>create <code>src/Application.php</code> by copying from the cakephp-app repo</li>
</ol>
<p>Now that our application is capable of handling middleware let’s add the
<a href="https://github.com/ozee31/cakephp-cors" target="_blank" rel="external">cakephp-cors middleware plugin</a> by running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require ozee31/cakephp-cors</div></pre></td></tr></table></figure>
<p>Enable the plugin by adding this to <code>config/bootstrap.php</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Plugin::load(<span class="string">'Cors'</span>, [<span class="string">'bootstrap'</span> =&gt; <span class="keyword">true</span>, <span class="string">'routes'</span> =&gt; <span class="keyword">false</span>]);</div></pre></td></tr></table></figure>
<p>Lastly, make sure to disable the CORS ExceptionRenderer in <code>config/app.php</code>
so it won’t override the JsonApiExceptionRenderer responsible for the JSON API
validation errors:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'Cors'</span> =&gt; [</div><div class="line">  <span class="string">'exceptionRenderer'</span> =&gt; <span class="keyword">false</span></div><div class="line">]</div></pre></td></tr></table></figure>
<p>Please note that the plugin will allow CORS for all origins, all methods and all headers by default
which is a very good thing as we will start using CORS pretty heavily in the next tutorial.</p>
<h2 id="6-Make-it-better"><a href="#6-Make-it-better" class="headerlink" title="6. Make it better"></a>6. Make it better</h2><p>Even though the JsonApiListener is already quite feature-complete, some parts of the JSON API specification 
(like <a href="http://jsonapi.org/format/#fetching-sparse-fieldsets" target="_blank" rel="external">Sparse Fieldsets</a> and query parameters) have
not been implemented yet. Feel free to submit a PR for missing functionality and help work towards a
full-featured implementation of the specification, the effort should be minimal.</p>
<h2 id="Additional-reading"><a href="#Additional-reading" class="headerlink" title="Additional reading"></a>Additional reading</h2><ul>
<li>Follow-up tutorial <a href="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/">How to use a CakePHP API as the data backend for Ember in 30 minutes</a></li>
<li><a href="http://crud.readthedocs.io/en/latest/listeners/jsonapi.html" target="_blank" rel="external">Crud JsonApiListener documentation</a></li>
<li><a href="https://github.com/bravo-kernel/application-examples/tree/master/blog-how-to-make-your-cakephp-3-api-produce-jsonapi" target="_blank" rel="external">Git repository</a> with working end state application as produced by this tutorial</li>
<li><a href="https://github.com/neomerx/json-api" target="_blank" rel="external">neomerx/jsonapi</a></li>
</ul>
<p><em>Hat tip to <a href="https://github.com/josbeir" target="_blank" rel="external">josbeir</a> for the inspiration found in his plugin.</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this follow-up post to
&lt;a href=&quot;/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/&quot;&gt;How to add JWT Authentication to a Ca
    
    </summary>
    
      <category term="CakePHP" scheme="http://bravo-kernel.com/categories/cakephp/"/>
    
    
      <category term="cakephp" scheme="http://bravo-kernel.com/tags/cakephp/"/>
    
      <category term="cakephp3" scheme="http://bravo-kernel.com/tags/cakephp3/"/>
    
      <category term="rest" scheme="http://bravo-kernel.com/tags/rest/"/>
    
      <category term="api" scheme="http://bravo-kernel.com/tags/api/"/>
    
      <category term="json api" scheme="http://bravo-kernel.com/tags/json-api/"/>
    
  </entry>
  
  <entry>
    <title>How to create responsive vertically aligned multiline radio button labels</title>
    <link href="http://bravo-kernel.com/2017/01/how-to-create-responsive-vertically-aligned-mulitline-radio-button-labels/"/>
    <id>http://bravo-kernel.com/2017/01/how-to-create-responsive-vertically-aligned-mulitline-radio-button-labels/</id>
    <published>2017-01-28T10:22:56.000Z</published>
    <updated>2017-03-06T19:03:56.728Z</updated>
    
    <content type="html"><![CDATA[<p>Step-by-step instructions for creating responsive vertical radio buttons with nicely
aligned  multiline labels (using either plain CSS or Foundation 6).</p>
<p><strong><a href="https://jsfiddle.net/bravo_kernel/wuxysegc/" target="_blank" rel="external">Fiddle example</a></strong></p>
<p><br></p>
<img src="/2017/01/how-to-create-responsive-vertically-aligned-mulitline-radio-button-labels/preview-vertical-radio-buttons.png" alt="Preview of vertically aligned radio button labels" title="Preview of vertically aligned radio button labels">
<h2 id="The-HTML"><a href="#The-HTML" class="headerlink" title="The HTML"></a>The HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- optionally include the Foundation 6 framework --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/foundation/6.3.0/css/foundation.min.css"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>What is your favorite Pokemon?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vertical-radio-buttons"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pokemon"</span> <span class="attr">value</span>=<span class="string">"Red"</span> <span class="attr">id</span>=<span class="string">"pokemonRed"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pokemonRed"</span>&gt;</span>Pokemon Red<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pokemon"</span> <span class="attr">value</span>=<span class="string">"Blue"</span> <span class="attr">id</span>=<span class="string">"pokemonBlue"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pokemonBlue"</span>&gt;</span>Multiline Pokemon Blue. Multiline Pokemon Blue. Multiline Pokemon Blue. Multiline Pokemon Blue. Multiline Pokemon Blue. <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pokemon"</span> <span class="attr">value</span>=<span class="string">"Yellow"</span> <span class="attr">id</span>=<span class="string">"pokemonYellow"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pokemonYellow"</span>&gt;</span>Pokemon Yellow<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="The-CSS"><a href="#The-CSS" class="headerlink" title="The CSS"></a>The CSS</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.vertical-radio-buttons div &#123;</div><div class="line">  display: block;</div><div class="line">  padding: 0 0 5px 5px;</div><div class="line">  clear: both;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.vertical-radio-buttons span &#123;</div><div class="line">  display: block;</div><div class="line">  padding-left: 20px;</div><div class="line">  cursor: inherit;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.vertical-radio-buttons label &#123;</div><div class="line">  font-size: rem-calc(16);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.vertical-radio-buttons input &#123;</div><div class="line">  float: left;</div><div class="line">  width: 20px;</div><div class="line">  margin-left: -20px;</div><div class="line">  margin-top: 6px; // vertically align radio button with text</div><div class="line">  padding: 0;</div><div class="line">  -webkit-appearance: radio;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Step-by-step instructions for creating responsive vertical radio buttons with nicely
aligned  multiline labels (using either plain CSS or
    
    </summary>
    
      <category term="css" scheme="http://bravo-kernel.com/categories/css/"/>
    
    
      <category term="css" scheme="http://bravo-kernel.com/tags/css/"/>
    
      <category term="foundation" scheme="http://bravo-kernel.com/tags/foundation/"/>
    
  </entry>
  
  <entry>
    <title>How to install Watchman on Debian</title>
    <link href="http://bravo-kernel.com/2016/11/how-to-install-watchman-on-debian/"/>
    <id>http://bravo-kernel.com/2016/11/how-to-install-watchman-on-debian/</id>
    <published>2016-11-22T12:54:38.000Z</published>
    <updated>2017-03-06T19:03:56.728Z</updated>
    
    <content type="html"><![CDATA[<p>To globally install Watchman on Debian:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install build-essential</div><div class="line">sudo apt-get install python-dev</div><div class="line">sudo apt-get install automake</div><div class="line">sudo apt-get install autoconf</div><div class="line"></div><div class="line"><span class="built_in">cd</span> /tmp</div><div class="line">git <span class="built_in">clone</span> https://github.com/facebook/watchman.git</div><div class="line"><span class="built_in">cd</span> watchman</div><div class="line">git checkout v4.7.0  <span class="comment"># or whatever is now the latest stable release</span></div><div class="line"></div><div class="line">./autogen.sh</div><div class="line">./configure --enable-statedir=/tmp</div><div class="line">sudo make</div><div class="line">sudo make install</div><div class="line">sudo mv watchman /usr/<span class="built_in">local</span>/bin/watchman</div></pre></td></tr></table></figure>
<blockquote>
<p>Please note that the <code>--enable-statedir</code> option must be set on
Debian systems to prevent Watchman startup failures due to
non-existing default location <code>/usr/local/var/run/watchman</code>.</p>
</blockquote>
<p>To make sure things went well:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line"><span class="built_in">which</span> watchman</div><div class="line"><span class="comment"># should display `/usr/local/bin/watchman`</span></div><div class="line"></div><div class="line">watchman -v</div><div class="line"><span class="comment"># should display the installed version e.g. `4.7.0`</span></div><div class="line"></div><div class="line">watchman watch .</div><div class="line"><span class="comment"># should display something similar to:</span></div><div class="line"><span class="comment"># &#123;</span></div><div class="line"><span class="comment">#    "version": "4.7.0",</span></div><div class="line"><span class="comment">#    "watch": "/home/vagrant",</span></div><div class="line"><span class="comment">#    "watcher": "inotify"</span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"></div><div class="line">watchman watch-del-all</div><div class="line">watchman shutdown-server</div></pre></td></tr></table></figure>
<p>Closing notes:</p>
<ul>
<li>Watchman state can be found in <code>/tmp/&lt;username&gt;-state/</code></li>
<li>Ember users should no longer see annoying Watchman related messages</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;To globally install Watchman on Debian:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;d
    
    </summary>
    
      <category term="Debian" scheme="http://bravo-kernel.com/categories/debian/"/>
    
    
      <category term="debian" scheme="http://bravo-kernel.com/tags/debian/"/>
    
      <category term="ember" scheme="http://bravo-kernel.com/tags/ember/"/>
    
  </entry>
  
  <entry>
    <title>Various solutions for solving the Elm Guide age exercise</title>
    <link href="http://bravo-kernel.com/2016/06/various-solutions-for-solving-the-elm-guide-age-exercise/"/>
    <id>http://bravo-kernel.com/2016/06/various-solutions-for-solving-the-elm-guide-age-exercise/</id>
    <published>2016-06-18T22:06:53.000Z</published>
    <updated>2017-03-06T19:03:56.728Z</updated>
    
    <content type="html"><![CDATA[<p>Step-by-step walkthrough of various solutions to the
<a href="http://guide.elm-lang.org/architecture/user_input/forms.html" target="_blank" rel="external">Elm Guide age challenge</a>
intended to help novice Elm users grasp types, type conversions and refactoring logic.</p>
<h2 id="Before-We-Begin"><a href="#Before-We-Begin" class="headerlink" title="Before We Begin"></a>Before We Begin</h2><p>Please note that:</p>
<ul>
<li>all provided code can be tested online by copy-pasting into the <a href="http://elm-lang.org/try" target="_blank" rel="external">online Elm Try editor</a></li>
<li>this tutorial is aimed at new users with little to no prior knowledge of the <a href="http://elm-lang.org/" target="_blank" rel="external">Elm</a> 
functional programming language</li>
<li>we assume users have read all information in the Guide up to and including the Forms page</li>
<li>we will follow the natural learning curve of novice users in four steps (from most simple to more complex)</li>
</ul>
<h2 id="The-challenge"><a href="#The-challenge" class="headerlink" title="The challenge"></a>The challenge</h2><p>The Elm Guide contains various cleverly placed “exercises” challenging the user
to dig in and solve seemingly simple problems. The one we are addressing is:</p>
<blockquote>
<p>Add an additional field for age and check that it is a number.</p>
</blockquote>
<p>We are picking up where the code example in the Guide stops so make sure to
at least understand that code or, even better, drop
<a href="https://github.com/bravo-kernel/application-examples/blob/master/blog-various-solutions-to-the-elm-guide-age-excercise/starting-source.elm" target="_blank" rel="external">a copy</a>
into the <a href="http://elm-lang.org/try" target="_blank" rel="external">online Elm Try editor</a>.</p>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1."></a>Solution 1.</h2><p>Mimicking earlier instructions in the Guide this is probably the first solution
users will come up with:</p>
<ul>
<li>adding a new record field <code>age</code> with type <code>Int</code> to the Model</li>
<li>making sure the new model field has a default value (<code>0</code>)</li>
<li>extending update <code>Msg</code> with <code>Age String</code> (not Int because onInput always returns a string)</li>
<li>extending update Case-Of with a new pattern for <code>Age</code></li>
<li>adding a new input field to the view</li>
<li>adding a new if statement to the view <code>viewValidation</code> (with smart user feedback message)</li>
</ul>
<p>This will either:</p>
<ul>
<li>update the record’s <code>age</code> field with the given input value if a valid number was provided</li>
<li>update the record’s <code>age</code> field with hardcoded <code>Result.withDefault</code> value if <code>String.toInt</code> conversion fails</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Html exposing (..)</div><div class="line"><span class="keyword">import</span> Html.App <span class="keyword">as</span> Html</div><div class="line"><span class="keyword">import</span> Html.Attributes exposing (..)</div><div class="line"><span class="keyword">import</span> Html.Events exposing (<span class="title">onInput</span>)</div><div class="line"><span class="keyword">import</span> String</div><div class="line"></div><div class="line"><span class="title">main</span> =</div><div class="line">  <span class="type">Html</span>.beginnerProgram</div><div class="line">    &#123; model = model</div><div class="line">    , view = view</div><div class="line">    , update = update</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">-- MODEL</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> alias <span class="type">Model</span> =</span></div><div class="line">  &#123; name : <span class="type">String</span></div><div class="line">  , password : <span class="type">String</span></div><div class="line">  , passwordAgain : <span class="type">String</span></div><div class="line">  , age: <span class="type">Int</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="title">model</span> : <span class="type">Model</span></div><div class="line"><span class="title">model</span> =</div><div class="line">  <span class="type">Model</span> <span class="string">""</span> <span class="string">""</span> <span class="string">""</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">-- UPDATE</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Msg</span></span></div><div class="line">    = <span class="type">Name</span> <span class="type">String</span></div><div class="line">    | <span class="type">Password</span> <span class="type">String</span></div><div class="line">    | <span class="type">PasswordAgain</span> <span class="type">String</span></div><div class="line">    | <span class="type">Age</span> <span class="type">String</span></div><div class="line"></div><div class="line"><span class="title">update</span> : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; <span class="type">Model</span></div><div class="line"><span class="title">update</span> action model =</div><div class="line">  <span class="keyword">case</span> action <span class="keyword">of</span></div><div class="line">    <span class="type">Name</span> name -&gt;</div><div class="line">      &#123; model | name = name &#125;</div><div class="line"></div><div class="line">    <span class="type">Password</span> password -&gt;</div><div class="line">      &#123; model | password = password &#125;</div><div class="line"></div><div class="line">    <span class="type">PasswordAgain</span> password -&gt;</div><div class="line">      &#123; model | passwordAgain = password &#125;</div><div class="line"></div><div class="line">    <span class="comment">-- =====================================================</span></div><div class="line">    <span class="comment">-- Age get's passed in here as string by `onInput` so we</span></div><div class="line">    <span class="comment">-- need to convert it to Int as this is the type required</span></div><div class="line">    <span class="comment">-- by our Model definition. Since `String.toInt` conversion</span></div><div class="line">    <span class="comment">-- could fail (and thus break our application) we make</span></div><div class="line">    <span class="comment">-- sure to set default value to 0 using Result.</span></div><div class="line">    <span class="comment">-- =====================================================</span></div><div class="line">    <span class="type">Age</span> age -&gt;</div><div class="line">      &#123; model | age = <span class="type">String</span>.toInt age |&gt; <span class="type">Result</span>.withDefault <span class="number">0</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">-- VIEW</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="title">view</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span></div><div class="line"><span class="title">view</span> model =</div><div class="line">  div []</div><div class="line">    [ input [ <span class="class"><span class="keyword">type</span>' "text", placeholder "<span class="type">Name</span>", onInput <span class="type">Name</span> ] []</span></div><div class="line"></div><div class="line">    <span class="comment">-- =====================================================</span></div><div class="line">    <span class="comment">-- Please note that `onInput` will always produce a</span></div><div class="line">    <span class="comment">-- string so even when we change the type "string" below</span></div><div class="line">    <span class="comment">-- to "number" (so the browser will check for numbers)</span></div><div class="line">    <span class="comment">-- we still need to do the String to Int conversion</span></div><div class="line">    <span class="comment">-- described above.</span></div><div class="line">    <span class="comment">-- =====================================================</span></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "string", placeholder "<span class="type">Age</span>", onInput <span class="type">Age</span> ] []</span></div><div class="line"></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "password", placeholder "<span class="type">Password</span>", onInput <span class="type">Password</span> ] []</span></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "password", placeholder "<span class="type">Re</span>-enter <span class="type">Password</span>", onInput <span class="type">PasswordAgain</span> ] []</span></div><div class="line">    , viewValidation model</div><div class="line">    ]</div><div class="line"></div><div class="line"><span class="title">viewValidation</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> msg</div><div class="line"><span class="title">viewValidation</span> model =</div><div class="line">  <span class="keyword">let</span></div><div class="line">    (color, message) =</div><div class="line">      <span class="keyword">if</span> model.age &lt; <span class="number">18</span> <span class="keyword">then</span></div><div class="line">        (<span class="string">"red"</span>, <span class="string">"You are not old enough to watch nude models yet"</span>)</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> model.password == model.passwordAgain <span class="keyword">then</span></div><div class="line">        (<span class="string">"green"</span>, <span class="string">"OK"</span>)</div><div class="line">      <span class="keyword">else</span></div><div class="line">        (<span class="string">"red"</span>, <span class="string">"Passwords do not match!"</span>)</div><div class="line">  <span class="keyword">in</span></div><div class="line">    div [ style [(<span class="string">"color"</span>, color)] ] [ text message ]</div></pre></td></tr></table></figure>
<p>Copy-paste the above code into the online editor and you will see an <code>age</code>
field that should behave as expected. Not bad for a first time Elm user, get
some coffee.</p>
<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><p>By now we realize that solution 1 is far from DRY. If we would change the
model’s default value we would have to update our code in two places (
the model’s default value and <code>Result.withDefault</code> value).</p>
<p>The logical step to refactor would be using the model’s default value so we
update our page a little, this time:</p>
<ul>
<li>replacing the existing Case-Of with in <code>update</code> a new case for <code>Age</code></li>
<li>returning the current record as-is (with it’s default value for <code>age</code>) if String.toInt conversion fails</li>
<li>updating the record’s age field with the integer provided by the user if the conversion
succeeds</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Html exposing (..)</div><div class="line"><span class="keyword">import</span> Html.App <span class="keyword">as</span> Html</div><div class="line"><span class="keyword">import</span> Html.Attributes exposing (..)</div><div class="line"><span class="keyword">import</span> Html.Events exposing (<span class="title">onInput</span>)</div><div class="line"><span class="keyword">import</span> String</div><div class="line"></div><div class="line"><span class="title">main</span> =</div><div class="line">  <span class="type">Html</span>.beginnerProgram</div><div class="line">    &#123; model = model</div><div class="line">    , view = view</div><div class="line">    , update = update</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">-- MODEL</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> alias <span class="type">Model</span> =</span></div><div class="line">  &#123; name : <span class="type">String</span></div><div class="line">  , password : <span class="type">String</span></div><div class="line">  , passwordAgain : <span class="type">String</span></div><div class="line">  , age: <span class="type">Int</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="title">model</span> : <span class="type">Model</span></div><div class="line"><span class="title">model</span> =</div><div class="line">  <span class="type">Model</span> <span class="string">""</span> <span class="string">""</span> <span class="string">""</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">-- UPDATE</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Msg</span></span></div><div class="line">    = <span class="type">Name</span> <span class="type">String</span></div><div class="line">    | <span class="type">Password</span> <span class="type">String</span></div><div class="line">    | <span class="type">PasswordAgain</span> <span class="type">String</span></div><div class="line">    | <span class="type">Age</span> <span class="type">String</span></div><div class="line"></div><div class="line"><span class="title">update</span> : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; <span class="type">Model</span></div><div class="line"><span class="title">update</span> action model =</div><div class="line">  <span class="keyword">case</span> action <span class="keyword">of</span></div><div class="line">    <span class="type">Name</span> name -&gt;</div><div class="line">      &#123; model | name = name &#125;</div><div class="line"></div><div class="line">    <span class="type">Password</span> password -&gt;</div><div class="line">      &#123; model | password = password &#125;</div><div class="line"></div><div class="line">    <span class="type">PasswordAgain</span> password -&gt;</div><div class="line">      &#123; model | passwordAgain = password &#125;</div><div class="line"></div><div class="line">    <span class="comment">-- =====================================================</span></div><div class="line">    <span class="comment">-- We still need to convert Age being passed in as type</span></div><div class="line">    <span class="comment">-- `String` to `Int` but this time we are not using </span></div><div class="line">    <span class="comment">-- Result.withDefault to set the default value to `0`.</span></div><div class="line">    <span class="comment">-- Instead, if String.toInt conversion fails we simply</span></div><div class="line">    <span class="comment">-- return the record as-is (effectively using the model's</span></div><div class="line">    <span class="comment">-- default value).</span></div><div class="line">    <span class="comment">-- =====================================================</span></div><div class="line">    <span class="type">Age</span> age -&gt;</div><div class="line">      <span class="keyword">case</span> <span class="type">String</span>.toInt age <span class="keyword">of</span></div><div class="line">        <span class="type">Result</span>.<span class="type">Err</span> err -&gt; <span class="comment">-- `err` will contain the error message, we could  use `_` and it would be ignored</span></div><div class="line">          model</div><div class="line">        <span class="type">Result</span>.<span class="type">Ok</span> age -&gt;</div><div class="line">          &#123; model | age = age &#125;</div><div class="line"></div><div class="line"><span class="comment">-- VIEW</span></div><div class="line"></div><div class="line"><span class="title">view</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span></div><div class="line"><span class="title">view</span> model =</div><div class="line">  div []</div><div class="line">    [ input [ <span class="class"><span class="keyword">type</span>' "text", placeholder "<span class="type">Name</span>", onInput <span class="type">Name</span> ] []</span></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "string", placeholder "<span class="type">Age</span>", onInput <span class="type">Age</span> ] []</span></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "password", placeholder "<span class="type">Password</span>", onInput <span class="type">Password</span> ] []</span></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "password", placeholder "<span class="type">Re</span>-enter <span class="type">Password</span>", onInput <span class="type">PasswordAgain</span> ] []</span></div><div class="line">    , viewValidation model</div><div class="line">    ]</div><div class="line"></div><div class="line"><span class="title">viewValidation</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> msg</div><div class="line"><span class="title">viewValidation</span> model =</div><div class="line">  <span class="keyword">let</span></div><div class="line">    (color, message) =</div><div class="line">      <span class="keyword">if</span> model.age &lt; <span class="number">18</span> <span class="keyword">then</span></div><div class="line">        (<span class="string">"red"</span>, <span class="string">"You're not old enough to watch nude models yet"</span>)</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> model.password == model.passwordAgain <span class="keyword">then</span></div><div class="line">        (<span class="string">"green"</span>, <span class="string">"OK"</span>)</div><div class="line">      <span class="keyword">else</span></div><div class="line">        (<span class="string">"red"</span>, <span class="string">"Passwords do not match!"</span>)</div><div class="line">  <span class="keyword">in</span></div><div class="line">    div [ style [(<span class="string">"color"</span>, color)] ] [ text message ]</div></pre></td></tr></table></figure>
<p>Again, copy-paste this code into the online editor. It should behave as expected. </p>
<h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h2><p>Even though solution 2 is already a lot nicer we would still need to duplicate
a lot of Case-Of logic in the <code>update</code> layer if we were to add another input
field requiring an integer.</p>
<p>The logical step to refactor would be creating a custom function for the
type conversion so we can re-use the logic. Again we update our page,
this time:</p>
<ul>
<li>adding a custom function <code>inputStringToInt</code> (using <code>String</code> as parameter, returning <code>Int</code>)</li>
<li>making the function return an Int if type conversion succeeds</li>
<li>making the function return 0 if the type conversion fails</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Debug</div><div class="line"><span class="keyword">import</span> Html exposing (..)</div><div class="line"><span class="keyword">import</span> Html.App <span class="keyword">as</span> Html</div><div class="line"><span class="keyword">import</span> Html.Attributes exposing (..)</div><div class="line"><span class="keyword">import</span> Html.Events exposing (<span class="title">onInput</span>)</div><div class="line"><span class="keyword">import</span> String</div><div class="line"></div><div class="line"><span class="title">main</span> =</div><div class="line">  <span class="type">Html</span>.beginnerProgram</div><div class="line">    &#123; model = model</div><div class="line">    , view = view</div><div class="line">    , update = update</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">-- MODEL</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> alias <span class="type">Model</span> =</span></div><div class="line">  &#123; name : <span class="type">String</span></div><div class="line">  , password : <span class="type">String</span></div><div class="line">  , passwordAgain : <span class="type">String</span></div><div class="line">  , age: <span class="type">Int</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="title">model</span> : <span class="type">Model</span></div><div class="line"><span class="title">model</span> =</div><div class="line">  <span class="type">Model</span> <span class="string">""</span> <span class="string">""</span> <span class="string">""</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">-- UPDATE</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Msg</span></span></div><div class="line">    = <span class="type">Name</span> <span class="type">String</span></div><div class="line">    | <span class="type">Password</span> <span class="type">String</span></div><div class="line">    | <span class="type">PasswordAgain</span> <span class="type">String</span></div><div class="line">    | <span class="type">Age</span> <span class="type">String</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="title">update</span> : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; <span class="type">Model</span></div><div class="line"><span class="title">update</span> action model =</div><div class="line">  <span class="keyword">case</span> action <span class="keyword">of</span></div><div class="line">    <span class="type">Name</span> name -&gt;</div><div class="line">      &#123; model | name = name &#125;</div><div class="line"></div><div class="line">    <span class="type">Password</span> password -&gt;</div><div class="line">      &#123; model | password = password &#125;</div><div class="line"></div><div class="line">    <span class="type">PasswordAgain</span> password -&gt;</div><div class="line">      &#123; model | passwordAgain = password &#125;</div><div class="line"></div><div class="line">    <span class="comment">-- =====================================================</span></div><div class="line">    <span class="comment">-- Convert age to Int using custom function so we can</span></div><div class="line">    <span class="comment">-- re-use logic for other input fields requiring Ints.</span></div><div class="line">    <span class="comment">-- =====================================================</span></div><div class="line">    <span class="type">Age</span> age -&gt;</div><div class="line">      &#123; model | age = inputStringToInt age &#125;</div><div class="line"></div><div class="line"><span class="comment">-- VIEW</span></div><div class="line"></div><div class="line"><span class="title">view</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span></div><div class="line"><span class="title">view</span> model =</div><div class="line">  div []</div><div class="line">    [ input [ <span class="class"><span class="keyword">type</span>' "text", placeholder "<span class="type">Name</span>", onInput <span class="type">Name</span> ] []</span></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "string", placeholder "<span class="type">Age</span>", onInput <span class="type">Age</span> ] []</span></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "password", placeholder "<span class="type">Password</span>", onInput <span class="type">Password</span> ] []</span></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "password", placeholder "<span class="type">Re</span>-enter <span class="type">Password</span>", onInput <span class="type">PasswordAgain</span> ] []</span></div><div class="line">    , viewValidation model</div><div class="line">    ]</div><div class="line"></div><div class="line"><span class="title">viewValidation</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> msg</div><div class="line"><span class="title">viewValidation</span> model =</div><div class="line">  <span class="keyword">let</span></div><div class="line">    (color, message) =</div><div class="line">      <span class="keyword">if</span> model.age &lt; <span class="number">18</span> <span class="keyword">then</span></div><div class="line">        (<span class="string">"red"</span>, <span class="string">"You're not old enough to watch nude models yet"</span>)</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> model.password == model.passwordAgain <span class="keyword">then</span></div><div class="line">        (<span class="string">"green"</span>, <span class="string">"OK"</span>)</div><div class="line">      <span class="keyword">else</span></div><div class="line">        (<span class="string">"red"</span>, <span class="string">"Passwords do not match!"</span>)</div><div class="line">  <span class="keyword">in</span></div><div class="line">    div [ style [(<span class="string">"color"</span>, color)] ] [ text message ]</div><div class="line"></div><div class="line"><span class="comment">-- CUSTOM FUNCTIONS</span></div><div class="line"></div><div class="line"><span class="title">inputStringToInt</span> : <span class="type">String</span> -&gt; <span class="type">Int</span></div><div class="line"></div><div class="line"><span class="title">inputStringToInt</span> input =</div><div class="line">  <span class="keyword">let</span> result = <span class="type">String</span>.toInt input</div><div class="line">  <span class="keyword">in</span> <span class="keyword">case</span> result <span class="keyword">of</span> </div><div class="line">    <span class="type">Err</span> msg -&gt; <span class="number">0</span> <span class="comment">-- `msg` will contain the error message, we could use `_` instead and it would be ignored</span></div><div class="line">    <span class="type">Ok</span> converted -&gt;  converted</div></pre></td></tr></table></figure>
<p>By know you should know the drill so… copy, paste, enjoy and get some coffee
(the good part is coming next).</p>
<h2 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution 4."></a>Solution 4.</h2><p>By now the concept of types should have landed and if things went well
there are probably two things on your mind right now:</p>
<ol>
<li>the major flaw in all previous solutions: how to make <code>age</code> optional (since we don’t want <code>0</code> as default value)</li>
<li>how on earth that would ever be possible knowing that Elm doesn’t support <code>null</code> or <code>undefined</code>?</li>
</ol>
<p>In all honesty, this is also probably the moment you should join the 
<a href="http://elmlang.herokuapp.com/" target="_blank" rel="external">Elm Slack</a> beginners channel and hope some of
the friendly people out there will help you out.</p>
<p>Luckily… we’ve  already done that and the solution for our problem is found
in the Elm core library
<a href="http://package.elm-lang.org/packages/elm-lang/core/4.0.1/Maybe" target="_blank" rel="external">Maybe</a>, literally stating:</p>
<blockquote>
<p>A Maybe can help you with optional arguments, error handling, and <strong>records with optional fields</strong>.</p>
</blockquote>
<p>For the last time we will update our page, this time:</p>
<ul>
<li>changing the model’s <code>age</code> field type to <code>Maybe Int</code></li>
<li>changing the model’s <code>age</code> field default value to <code>Nothing</code> (think of it as <code>null</code>)</li>
<li>updating our custom function <code>inputStringToInt</code> to:<ul>
<li>return <code>Maybe Int</code> (instead of <code>Int</code>)</li>
<li>return <code>Nothing</code> if the type conversion fails</li>
<li>return a <code>Just Int</code> value if the conversion succeeds</li>
</ul>
</li>
</ul>
<p>Please note that we also MUST replace the if statement inside
<code>viewValidation</code> with a Case-Of because standard Elm comparisons will only 
accept basic types like integers, strings, etc.</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Html exposing (..)</div><div class="line"><span class="keyword">import</span> Html.App <span class="keyword">as</span> Html</div><div class="line"><span class="keyword">import</span> Html.Attributes exposing (..)</div><div class="line"><span class="keyword">import</span> Html.Events exposing (<span class="title">onInput</span>)</div><div class="line"><span class="keyword">import</span> String</div><div class="line"></div><div class="line"><span class="title">main</span> =</div><div class="line">  <span class="type">Html</span>.beginnerProgram</div><div class="line">    &#123; model = model</div><div class="line">    , view = view</div><div class="line">    , update = update</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">-- MODEL</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> alias <span class="type">Model</span> =</span></div><div class="line">  &#123; name : <span class="type">String</span></div><div class="line">  , password : <span class="type">String</span></div><div class="line">  , passwordAgain : <span class="type">String</span></div><div class="line">  , age: <span class="type">Maybe</span> <span class="type">Int</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="title">model</span> : <span class="type">Model</span></div><div class="line"><span class="title">model</span> =</div><div class="line">  <span class="type">Model</span> <span class="string">""</span> <span class="string">""</span> <span class="string">""</span> <span class="type">Nothing</span></div><div class="line"></div><div class="line"><span class="comment">-- UPDATE</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Msg</span></span></div><div class="line">    = <span class="type">Name</span> <span class="type">String</span></div><div class="line">    | <span class="type">Password</span> <span class="type">String</span></div><div class="line">    | <span class="type">PasswordAgain</span> <span class="type">String</span></div><div class="line">    | <span class="type">Age</span> <span class="type">String</span> <span class="comment">-- we keep this a String because that's what we get from `onInput` (converted to Maybe Int before inserting into model)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="title">update</span> : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; <span class="type">Model</span></div><div class="line"><span class="title">update</span> action model =</div><div class="line">  <span class="keyword">case</span> action <span class="keyword">of</span></div><div class="line">    <span class="type">Name</span> name -&gt;</div><div class="line">      &#123; model | name = name &#125;</div><div class="line"></div><div class="line">    <span class="type">Password</span> password -&gt;</div><div class="line">      &#123; model | password = password &#125;</div><div class="line"></div><div class="line">    <span class="type">PasswordAgain</span> password -&gt;</div><div class="line">      &#123; model | passwordAgain = password &#125;</div><div class="line"></div><div class="line">    <span class="type">Age</span> age -&gt;</div><div class="line">       &#123; model | age = inputStringToInt age &#125;</div><div class="line"></div><div class="line"><span class="comment">-- VIEW</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="title">view</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span></div><div class="line"><span class="title">view</span> model =</div><div class="line">  div []</div><div class="line">    [ input [ <span class="class"><span class="keyword">type</span>' "text", placeholder "<span class="type">Name</span>", onInput <span class="type">Name</span> ] []</span></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "string", placeholder "<span class="type">Age</span>", onInput <span class="type">Age</span> ] []</span></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "password", placeholder "<span class="type">Password</span>", onInput <span class="type">Password</span> ] []</span></div><div class="line">    , input [ <span class="class"><span class="keyword">type</span>' "password", placeholder "<span class="type">Re</span>-enter <span class="type">Password</span>", onInput <span class="type">PasswordAgain</span> ] []</span></div><div class="line">    , viewValidation model</div><div class="line">    ]</div><div class="line"></div><div class="line"><span class="title">viewValidation</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> msg</div><div class="line"></div><div class="line"><span class="title">viewValidation</span> model =</div><div class="line">  <span class="keyword">let</span></div><div class="line">    (color, message) =</div><div class="line">      <span class="keyword">case</span> model.age <span class="keyword">of</span></div><div class="line">        <span class="type">Nothing</span> -&gt;</div><div class="line">          (<span class="string">"red"</span>, <span class="string">"Please provide your age"</span>)</div><div class="line">        <span class="type">Just</span> age -&gt; <span class="keyword">if</span> age &lt; <span class="number">18</span> <span class="keyword">then</span></div><div class="line">          (<span class="string">"red"</span>, <span class="string">"You're not old enough to watch nude models yet!"</span>)</div><div class="line">          <span class="keyword">else</span> <span class="keyword">if</span> model.password == <span class="string">""</span> <span class="keyword">then</span></div><div class="line">            (<span class="string">"red"</span>, <span class="string">"Please provide a password"</span>)                </div><div class="line">          <span class="keyword">else</span> <span class="keyword">if</span> model.password == model.passwordAgain <span class="keyword">then</span></div><div class="line">           (<span class="string">"green"</span>, <span class="string">"OK"</span>)</div><div class="line">          <span class="keyword">else</span></div><div class="line">            (<span class="string">"red"</span>, <span class="string">"Passwords do not match!"</span>)</div><div class="line"></div><div class="line">  <span class="keyword">in</span></div><div class="line">    div [ style [(<span class="string">"color"</span>, color)] ] [ text message ]</div><div class="line"></div><div class="line"><span class="comment">-- CUSTOM FUNCTIONS</span></div><div class="line"></div><div class="line"><span class="title">inputStringToInt</span> : <span class="type">String</span> -&gt; <span class="type">Maybe</span> <span class="type">Int</span></div><div class="line"></div><div class="line"><span class="title">inputStringToInt</span> input =</div><div class="line">  <span class="keyword">case</span> <span class="type">String</span>.toInt input <span class="keyword">of</span></div><div class="line">    <span class="type">Err</span> _ -&gt; <span class="type">Nothing</span></div><div class="line">    <span class="type">Ok</span> converted -&gt; <span class="type">Just</span> converted</div></pre></td></tr></table></figure>
<p>Copy, paste and be merry. We have not only completed the <code>age</code> challenge, in 
the process we learned about types and how to convert them while keeping
our code DRY and highly maintainable. Thank you Elm!</p>
<h2 id="Closing-Notes"><a href="#Closing-Notes" class="headerlink" title="Closing Notes"></a>Closing Notes</h2><p>As with all learning curves these are obviously only the first baby steps into
the world called Elm but it should provide you with enough confidence to continue
with the next chapter of the Guide.</p>
<p>Another thing to note is that “there is more than one way to do it” and thus
the provided solutions are non-exhaustive and most likely a lot of different
approaches are possible and they may all be valid or even better.</p>
<p>For example, the following feedback was provided on Slack:</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">if</span> condition <span class="keyword">then</span> x <span class="keyword">else</span> y</div></pre></td></tr></table></figure>
<p>is equivalent to</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">case condition of</div><div class="line">  True -&gt; x</div><div class="line">  False -&gt; y</div></pre></td></tr></table></figure>
<p>Whiere the first is more readable, and abstracts away the pattern
matching. I would always prefer using abstraction instead of direct pattern
matching in general, because that means if the implementations of the type
changes in the future (unlikely for Bool types) you won’t have to update every
single function that consumes the type. It’s effectively a way to achieve
encapsulation.</p>
<p>So still lots to explore, learn and try but remember… if it compiles it’s good ;)</p>
<p><em>Big thank you to Elm Community members 
<a href="https://github.com/mattsenior" target="_blank" rel="external">mattsenior</a>, 
<a href="https://github.com/szabba" target="_blank" rel="external">szabba</a> and
<a href="https://github.com/iteloo" target="_blank" rel="external">iteloo</a>
for their help while creating this post.</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Step-by-step walkthrough of various solutions to the
&lt;a href=&quot;http://guide.elm-lang.org/architecture/user_input/forms.html&quot; target=&quot;_blan
    
    </summary>
    
      <category term="elm" scheme="http://bravo-kernel.com/categories/elm/"/>
    
    
      <category term="elm" scheme="http://bravo-kernel.com/tags/elm/"/>
    
      <category term="elm-lang" scheme="http://bravo-kernel.com/tags/elm-lang/"/>
    
  </entry>
  
  <entry>
    <title>Instant Nginx API key authentication for your CakePHP API</title>
    <link href="http://bravo-kernel.com/2015/10/instant-nginx-api-key-authentication-for-your-cakephp-api/"/>
    <id>http://bravo-kernel.com/2015/10/instant-nginx-api-key-authentication-for-your-cakephp-api/</id>
    <published>2015-10-26T20:50:30.000Z</published>
    <updated>2017-03-06T19:03:56.728Z</updated>
    
    <content type="html"><![CDATA[<p>Instantly add rock solid API key authentication for your CakePHP
(<a href="https://github.com/FriendsOfCake/crud" target="_blank" rel="external">CRUD</a>) API using
nothing more than a simple Nginx configuration file:</p>
<ul>
<li>protect your API before even coding</li>
<li>no code, no overhead</li>
<li>json error response consistent with the <a href="http://crud.readthedocs.org/en/latest/listeners/api.html#id1" target="_blank" rel="external">FriendsOfCake API Listener</a> or JSONAPI</li>
<li>manual API key updating and revocation</li>
<li>replace with a “proper” solution when you’re ready</li>
</ul>
<h2 id="1-Creating-the-nginx-conf-file"><a href="#1-Creating-the-nginx-conf-file" class="headerlink" title="1. Creating the nginx conf file"></a>1. Creating the nginx conf file</h2><p>Create new file <code>/etc/nginx/api_keys.conf</code> with the following content:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># define boolean</span></div><div class="line"><span class="built_in">set</span> <span class="variable">$valid</span> 0;</div><div class="line"></div><div class="line"><span class="comment"># bravo-kernel's key</span></div><div class="line"><span class="keyword">if</span> (<span class="variable">$http_apikey</span> = <span class="string">'abcdefg123456'</span>) &#123;</div><div class="line">    <span class="built_in">set</span> <span class="variable">$valid</span> 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># mikey's key</span></div><div class="line"><span class="keyword">if</span> (<span class="variable">$http_apikey</span> = <span class="string">'1234567890'</span>) &#123;</div><div class="line">    <span class="built_in">set</span> <span class="variable">$valid</span> 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># throw 403 with CakePHP Crud compatible JSON error response if no key match was made</span></div><div class="line"><span class="keyword">if</span> (<span class="variable">$valid</span> = 0) &#123;</div><div class="line">    add_header <span class="string">'Content-Type'</span> <span class="string">'application/json;charset=UTF-8'</span> always;</div><div class="line">    <span class="built_in">return</span> 403 <span class="string">'&#123;"success": false, "data":&#123;"message":"Invalid API Key", "url": "$request_uri", "code":403&#125;&#125;'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If you prefer JSONAPI simply replace the <code>$valid</code> condition above with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="comment"># Throw 403 with JSONAPI error response if no key match was made</span></div><div class="line"><span class="keyword">if</span> (<span class="variable">$valid</span> = 0) &#123;</div><div class="line">	add_header <span class="string">'Content-Type'</span> <span class="string">'application/vnd.api+json;charset=UTF-8'</span> always;</div><div class="line">	add_header <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span> always;</div><div class="line">	<span class="built_in">return</span> 403 <span class="string">'&#123;"errors": [&#123; "status": "403", "source": &#123; "pointer": "$request_uri" &#125;, "title":  "Forbidden", "detail": "Invalid API key" &#125;]&#125;'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The above:</p>
<ul>
<li>will check all connections for the presence of an <code>apikey</code> header</li>
<li>will do nothing if a matching apikey is found, otherwise:<ul>
<li>throws a 403 error</li>
<li>produces a JSON  error response body in either JSONAPI or 
<a href="http://crud.readthedocs.org/en/latest/listeners/api.html#id1" target="_blank" rel="external">FoC API Listener</a>
compatible format</li>
</ul>
</li>
</ul>
<blockquote>
<p>Do NOT use underscores in your custom header (key) names <a href="http://stackoverflow.com/questions/22856136/why-underscores-are-forbidden-in-http-header-names" target="_blank" rel="external">as nginx
will remove them by default</a>.</p>
</blockquote>
<h2 id="2-Enabling-API-key-protection"><a href="#2-Enabling-API-key-protection" class="headerlink" title="2. Enabling API key protection"></a>2. Enabling API key protection</h2><p>To enable API key protection for your virtual host:</p>
<ol>
<li><p>Open your nginx vhost file</p>
</li>
<li><p>Add the following line directly below the <code>~ \.php</code> location</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include /etc/nginx/api_keys.conf;</div></pre></td></tr></table></figure>
<p> So your configuration will look similar to:</p>
 <figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</div><div class="line">    <span class="attribute">include</span> /etc/nginx/api_keys.conf;</div><div class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</div><div class="line">    <span class="attribute">include</span> /etc/nginx/fastcgi_params;</div><div class="line">    <span class="attribute">fastcgi_pass</span>    unix:/var/run/php5-fpm.sock;</div><div class="line">    <span class="attribute">fastcgi_index</span>   index.php;</div><div class="line">    <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Please note that will ONLY protect your php served files. To protect
e.g. static html folders simply include the <code>api_keys.conf</code> in those
locations as well. </p>
</blockquote>
</li>
<li><p>Restart nginx to effectuate the changes:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-Testing-your-setup"><a href="#3-Testing-your-setup" class="headerlink" title="3. Testing your setup"></a>3. Testing your setup</h2><ol>
<li><p>Open a configurable REST client like <a href="https://www.getpostman.com/" target="_blank" rel="external">the Postman plugin</a> for Chrome.</p>
</li>
<li><p>Try to access one of your API resources</p>
</li>
<li><p>You should see a json (403) error response similar to the one below proving:</p>
<ul>
<li>your API resources are no longer accessible without a valid API key</li>
<li><p>Nginx is serving json similar to the CRUD plugin</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;success&quot;: false,</div><div class="line">  &quot;data&quot;: &#123;</div><div class="line">    &quot;message&quot;: &quot;Invalid API Key&quot;,</div><div class="line">    &quot;url&quot;: &quot;/cocktails&quot;,</div><div class="line">    &quot;code&quot;: 403</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Now add a custom header named <code>apikey</code> and value <code>1234567890</code></p>
</li>
<li><p>Try accessing the same resource</p>
</li>
<li><p>If things went well you should a familiar CakePHP success response (200)
containing your API resources in the json body.</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Instantly add rock solid API key authentication for your CakePHP
(&lt;a href=&quot;https://github.com/FriendsOfCake/crud&quot; target=&quot;_blank&quot; rel=&quot;ex
    
    </summary>
    
      <category term="cakephp" scheme="http://bravo-kernel.com/categories/cakephp/"/>
    
    
      <category term="cakephp" scheme="http://bravo-kernel.com/tags/cakephp/"/>
    
      <category term="foc" scheme="http://bravo-kernel.com/tags/foc/"/>
    
      <category term="nginx" scheme="http://bravo-kernel.com/tags/nginx/"/>
    
      <category term="api" scheme="http://bravo-kernel.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>How to change the country used by the Windows 10 News Live Tile</title>
    <link href="http://bravo-kernel.com/2015/10/how-to-change-the-country-used-by-the-windows-10-news-live-tile/"/>
    <id>http://bravo-kernel.com/2015/10/how-to-change-the-country-used-by-the-windows-10-news-live-tile/</id>
    <published>2015-10-17T14:11:49.000Z</published>
    <updated>2017-03-06T19:03:56.716Z</updated>
    
    <content type="html"><![CDATA[<p>Follow these steps to make the Windows 10 News App display news for your
specific country.</p>
<ol>
<li><p>Open the Windows 10 Search Menu, type <code>news</code> and select the News application</p>
<p><img src="windows-10-search-menu.png" alt="Windows 10 Search Menu"></p>
</li>
<li><p>Open the Setting windows by pressing the cog icon (bottom left)</p>
<p><img src="windows-10-news-app-main-window-en.png" alt="Windows 10 News App Main Window - English"></p>
</li>
<li><p>On the settings window select your preferred country and choose <code>Close App</code></p>
<p><img src="windows-10-news-app-settings-window.png" alt="Windows 10 News App Settings Window"></p>
</li>
<li><p>Restart the news app, it should now show news for your specific country</p>
<p><img src="windows-10-news-app-main-window-nl.png" alt="Windows 10 News App Main Window - Dutch"></p>
</li>
<li><p>Open the Start Menu to verify the News Live Tile has been updated as well</p>
<p><img src="windows-10-start-menu-news-live-tile.png" alt="Windows 10 Start Menu News Live Tile"></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Follow these steps to make the Windows 10 News App display news for your
specific country.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the Windows 10 Search Men
    
    </summary>
    
      <category term="Microsoft" scheme="http://bravo-kernel.com/categories/microsoft/"/>
    
    
      <category term="microsoft" scheme="http://bravo-kernel.com/tags/microsoft/"/>
    
      <category term="windows10" scheme="http://bravo-kernel.com/tags/windows10/"/>
    
  </entry>
  
  <entry>
    <title>Setting up Hexo on Windows</title>
    <link href="http://bravo-kernel.com/2015/10/setting-up-hexo-on-windows/"/>
    <id>http://bravo-kernel.com/2015/10/setting-up-hexo-on-windows/</id>
    <published>2015-10-11T15:45:43.000Z</published>
    <updated>2017-03-06T19:03:56.716Z</updated>
    
    <content type="html"><![CDATA[<p>Follow these instructions to install and configure the
<a href="https://hexo.io/" target="_blank" rel="external">Hexo blog framework</a> on Windows.</p>
<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git Bash</a></li>
</ul>
<h2 id="Installing-Node-js"><a href="#Installing-Node-js" class="headerlink" title="Installing Node.js"></a>Installing Node.js</h2><ol>
<li><p>Install Node.js</p>
<p> <img src="node-js-installer.png" alt="Node.js Windows Installer"></p>
</li>
<li><p>Make sure to allow Node.js Windows Firewall access.</p>
<p> <img src="windows-firewall.png" alt="Windows Firewall access"></p>
</li>
<li><p>Verify the installation by running the following commands
inside the Git Bash:</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Re-installing-hexo"><a href="#Re-installing-hexo" class="headerlink" title="Re-installing hexo"></a>Re-installing hexo</h2><p>For those re-installing Hexo and using an existing hexo blog repository:</p>
<ul>
<li>do NOT create the directory described step 1 but checkout your blog repo instead</li>
<li>cd into your repo directory and git checkout the <code>source</code> branch</li>
<li>then simply follow the exact same steps (starting from 2) but SKIP the <code>hexo init</code> command</li>
</ul>
<h2 id="Installing-hexo"><a href="#Installing-hexo" class="headerlink" title="Installing hexo"></a>Installing hexo</h2><p>Please note that all commands are to be executed within the Git Bash.</p>
<ol>
<li><p>Create a new directory that will hold your blog</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir myblog</div><div class="line"><span class="built_in">cd</span> myblog</div></pre></td></tr></table></figure>
</li>
<li><p>Install the hexo framework and the git deployer</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">hexo -v</div></pre></td></tr></table></figure>
</li>
<li><p>Initialize your blog</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init</div><div class="line">npm install</div><div class="line">hexo serve</div></pre></td></tr></table></figure>
</li>
<li><p>Now browse to <code>http://localhost:4000</code> and enjoy your first blog</p>
</li>
<li><p>You’re good to go, next steps would be:</p>
<ul>
<li>customizing <code>_config.yml</code> to your likings</li>
<li>creating your first post by running <code>hexo new</code></li>
</ul>
</li>
</ol>
<h2 id="Deploying"><a href="#Deploying" class="headerlink" title="Deploying"></a>Deploying</h2><p>The hexo git deployer has taken all the hard work out of deploying your
blog to your master repo.</p>
<ol>
<li><p>First load your Github private key inside the Git Bash</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span> `ssh-agent`</div><div class="line">ssh-add ~/.ssh/github_rsa_key</div></pre></td></tr></table></figure>
</li>
<li><p>Now simply generate and deploy your blog</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate <span class="_">-d</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Follow these instructions to install and configure the
&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo blog framework&lt;/a&gt; 
    
    </summary>
    
      <category term="Web" scheme="http://bravo-kernel.com/categories/web/"/>
    
    
      <category term="hexo" scheme="http://bravo-kernel.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://bravo-kernel.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>How to remove Add-ins from Office 2016</title>
    <link href="http://bravo-kernel.com/2015/10/how-to-remove-add-ins-from-office-2016/"/>
    <id>http://bravo-kernel.com/2015/10/how-to-remove-add-ins-from-office-2016/</id>
    <published>2015-10-10T15:45:43.000Z</published>
    <updated>2017-03-06T19:03:56.716Z</updated>
    
    <content type="html"><![CDATA[<p>Remove Office 2016 Add-ins to drastically improve startup times, applies to:</p>
<ul>
<li>Word 2016</li>
<li>Excel 2016</li>
<li>Powerpoint 2016</li>
</ul>
<h2 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h2><ol>
<li><p>Open your Office 2016 product.</p>
</li>
<li><p>Select the <code>File</code> option from the Microsoft Office Ribbon menu.</p>
<p><img src="office-2016-ribbon.png" alt="Microsoft Office 2016 Ribbon"></p>
</li>
<li><p>Select <code>Options</code> in the left navigation bar</p>
<p><img src="office-2016-options.png" alt="Microsoft Office 2016 Options"></p>
</li>
<li><p>On the Add-ins window press <code>Go</code></p>
<p><img src="office-2016-add-ins.png" alt="Microsoft Office 2016 Add-ins"></p>
</li>
<li><p>Deselect all Add-ins you don’t need</p>
<p><img src="office-2016-add-in-selector.png" alt="Microsoft Office 2016 Add-in Selector"></p>
</li>
<li><p>Press <code>OK</code></p>
</li>
<li><p>Now restart your Office 2016 product and enjoy lightning fast startups</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Remove Office 2016 Add-ins to drastically improve startup times, applies to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Word 2016&lt;/li&gt;
&lt;li&gt;Excel 2016&lt;/li&gt;
&lt;li&gt;Powerpoi
    
    </summary>
    
      <category term="Microsoft" scheme="http://bravo-kernel.com/categories/microsoft/"/>
    
    
      <category term="microsoft" scheme="http://bravo-kernel.com/tags/microsoft/"/>
    
      <category term="office" scheme="http://bravo-kernel.com/tags/office/"/>
    
  </entry>
  
  <entry>
    <title>How to create Scheduled Tasks for Powershell on Windows Server 2012</title>
    <link href="http://bravo-kernel.com/2015/09/how-to-create-scheduled-tasks-for-powershell-on-windows-server-2012/"/>
    <id>http://bravo-kernel.com/2015/09/how-to-create-scheduled-tasks-for-powershell-on-windows-server-2012/</id>
    <published>2015-09-21T18:45:43.000Z</published>
    <updated>2017-03-06T19:03:56.716Z</updated>
    
    <content type="html"><![CDATA[<p>Properly configured Scheduled Tasks for Powershell scripts on Windows Server 2012.</p>
<h2 id="Creating-the-service-account"><a href="#Creating-the-service-account" class="headerlink" title="Creating the service account"></a>Creating the service account</h2><p>Assuming the account only requires local administrator permissions:</p>
<ul>
<li>open the Local Users and Groups console (<code>lusrmgr.msc</code>)</li>
<li>create a new local user (service) account used to execute the scheduled task</li>
<li>add the service account to the local Administrators group</li>
<li>open the Local Security console (<code>gepdit.msc</code>) and expand:<ul>
<li>Local Computer Policy</li>
<li>Windows Settings</li>
<li>Security Settings</li>
<li>Local Policies</li>
<li>User Rights Assignment</li>
</ul>
</li>
<li>open the <code>Log on as a service</code> policy and make sure to add the service account</li>
</ul>
<h2 id="Creating-the-Scheduled-Task"><a href="#Creating-the-Scheduled-Task" class="headerlink" title="Creating the Scheduled Task"></a>Creating the Scheduled Task</h2><p>Open the Task Scheduler console (<code>taskschd.msc</code>) and create a new task.</p>
<h3 id="General-tab"><a href="#General-tab" class="headerlink" title="General tab"></a>General tab</h3><ul>
<li>use a meaningful name</li>
<li>specify your service account using the <code>Change User or Group</code> button</li>
<li>select <code>Run whether user user is logged in or not</code></li>
<li>select the <code>hidden</code> option</li>
<li>set the <code>Configure for</code> option to Windows Server 2012</li>
</ul>
<h3 id="Triggers-tab"><a href="#Triggers-tab" class="headerlink" title="Triggers tab"></a>Triggers tab</h3><p>Create two triggers:</p>
<ul>
<li>one using begin <code>At startup</code> so the scheduled task will survive reboots</li>
<li>one using begin <code>At task creation/modification</code> so it will run from the
moment the task is created</li>
</ul>
<p>Make sure both triggers share the same configuration:</p>
<ul>
<li>select <code>Repeat task at every</code> and set to e.g. 30 minutes</li>
<li>change the duration to <code>Indefinitely</code></li>
<li>be proactive; stop the task if it runs longer than <code>1 hour</code></li>
<li>select the <code>Enabled</code> checkbox</li>
</ul>
<h3 id="Actions-tab"><a href="#Actions-tab" class="headerlink" title="Actions tab"></a>Actions tab</h3><p>Create a new action:</p>
<ul>
<li>select <code>Start a program</code></li>
<li>set the <code>Program/script</code> field to (just) <code>Powershell</code></li>
<li>set the <code>Arguments</code> field to <code>-noprofile -executionpolicy bypass -file &quot;c:\your-script.ps1&quot;</code></li>
<li>even though this is optional it would be wise to fill the <code>Start in (optional)</code>
field with the full path of the directory your script is located in</li>
</ul>
<blockquote>
<p><strong>Note:</strong> do NOT use the <code>-noexit</code> argument as this will keep your task running
indefinitely, preventing it to reach <code>Ready</code> state after completion.</p>
</blockquote>
<h3 id="Conditions-tab"><a href="#Conditions-tab" class="headerlink" title="Conditions tab"></a>Conditions tab</h3><p>Nothing to do here</p>
<h3 id="Settings-tab"><a href="#Settings-tab" class="headerlink" title="Settings tab"></a>Settings tab</h3><p>Make sure to set the bottom most dropdown to <code>Stop the existing instance</code>.</p>
<h2 id="Round-up"><a href="#Round-up" class="headerlink" title="Round up"></a>Round up</h2><p>On saving the task it will:</p>
<ul>
<li>start immediately (status <code>Running</code>)</li>
<li>change to status <code>Queued</code> after it has completed</li>
<li>will be executed again every other 30 minutes</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Properly configured Scheduled Tasks for Powershell scripts on Windows Server 2012.&lt;/p&gt;
&lt;h2 id=&quot;Creating-the-service-account&quot;&gt;&lt;a href=&quot;#Cr
    
    </summary>
    
      <category term="Microsoft" scheme="http://bravo-kernel.com/categories/microsoft/"/>
    
    
      <category term="microsoft" scheme="http://bravo-kernel.com/tags/microsoft/"/>
    
      <category term="server-2012" scheme="http://bravo-kernel.com/tags/server-2012/"/>
    
  </entry>
  
  <entry>
    <title>Handige Minecraft weetjes (Dutch)</title>
    <link href="http://bravo-kernel.com/2015/06/minecraft-tips-and-tricks-dutch/"/>
    <id>http://bravo-kernel.com/2015/06/minecraft-tips-and-tricks-dutch/</id>
    <published>2015-06-27T10:38:10.000Z</published>
    <updated>2017-03-06T19:03:56.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Multiverse"><a href="#Multiverse" class="headerlink" title="Multiverse"></a>Multiverse</h2><ul>
<li><a href="http://dev.bukkit.org/bukkit-plugins/multiverse-core/" target="_blank" rel="external">Multiverse website</a></li>
<li><a href="https://github.com/Multiverse/Multiverse-Core/wiki/Command-Reference" target="_blank" rel="external">Alle Multiverse commando’s</a></li>
<li><a href="https://github.com/Multiverse/Multiverse-Core/wiki/World-properties" target="_blank" rel="external">Alle Multiverse per-wereld commando’s</a></li>
</ul>
<h2 id="Multiverse-spawns"><a href="#Multiverse-spawns" class="headerlink" title="Multiverse spawns"></a>Multiverse spawns</h2><p>Om als speler naar de spawn te gaan van de wereld waar je nu in zit:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mv spawn</div></pre></td></tr></table></figure>
<p>Om als speler naar de spawn van een andere wereld dan degene waar je nu in zit te gaan:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mv tp &lt;naam-van-je-wereld&gt;</div></pre></td></tr></table></figure>
<p>Om de standaard spawn wereld voor <strong>nieuwe</strong> spelers (die voor het eerst op je server inloggen)
in te stellen voer je deze commando’s als admin uit:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/mv conf firstspawnoverride <span class="literal">true</span></div><div class="line">/mv conf firstspawnworld &lt;naam-van-je-wereld&gt;</div></pre></td></tr></table></figure>
<h2 id="Multiverse-werelden"><a href="#Multiverse-werelden" class="headerlink" title="Multiverse werelden"></a>Multiverse werelden</h2><h3 id="Namen"><a href="#Namen" class="headerlink" title="Namen"></a>Namen</h3><p>Omdat je de namen van je werelden veel zal moeten gebruiken (voor portals, aliassen, etc) is het niet
verstandig om “zo maar namen” te gebruiken. Probeer een slimme naamgeving te gebruiken die je leven
als admin een stuk makkelijker zal maken. Goede tips zijn:</p>
<ul>
<li>gebruik alleen kleine letters</li>
<li>gebruik volgnummers voor je werelden (bijv. creative1, creative2, kingdom1)</li>
</ul>
<h3 id="Seeds"><a href="#Seeds" class="headerlink" title="Seeds"></a>Seeds</h3><p>Minecraft werelden worden gemaakt met een <code>seed</code>. Seeds zijn combinaties van letters en/of cijfers
die het uiterlijk van je wereld bepalen. Je kunt zelf een seed bedenken of er één pikken van de
vele sites die seeds bijhouden zoals <a href="http://www.minecraftseeds.co/" target="_blank" rel="external">http://www.minecraftseeds.co/</a>.</p>
<h3 id="Nieuwe-wereld-maken"><a href="#Nieuwe-wereld-maken" class="headerlink" title="Nieuwe wereld maken"></a>Nieuwe wereld maken</h3><p>Om een nieuwe unieke Multiverse wereld te maken met je eigen seed voer je dit commando uit:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv create &lt;naam-van-je-wereld&gt; NORMAL <span class="_">-s</span> <span class="string">"Mijn eigen unieke seed!"</span></div></pre></td></tr></table></figure>
<p><strong>Let op:</strong> vergeet je nieuwe wereld niet toe te voegen aan het lijstje met <code>PerWorldInventory</code>
werelden!</p>
<h3 id="Flat-wereld-maken"><a href="#Flat-wereld-maken" class="headerlink" title="Flat wereld maken"></a>Flat wereld maken</h3><p>Soms wil je liever een platte wereld, voer dan dit commando uit:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mv create flatworld1 NORMAL -t FLAT</div></pre></td></tr></table></figure>
<p><strong>Let op:</strong> vergeet je nieuwe wereld niet toe te voegen aan het lijstje met <code>PerWorldInventory</code>
werelden!</p>
<h3 id="Gamemode-instellen"><a href="#Gamemode-instellen" class="headerlink" title="Gamemode instellen"></a>Gamemode instellen</h3><p>Je kunt de gamemode voor je wereld instellen op <code>creative</code> of <code>survival</code> door
één van deze commando’s te kiezen:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/mvm <span class="built_in">set</span> gamemode creative &lt;naam-van-je-wereld&gt;</div><div class="line">/mvm <span class="built_in">set</span> gamemode survival &lt;naam-van-je-wereld&gt;</div></pre></td></tr></table></figure>
<h3 id="Moeilijkheid-instellen"><a href="#Moeilijkheid-instellen" class="headerlink" title="Moeilijkheid instellen"></a>Moeilijkheid instellen</h3><p>Je kunt de moeilijkheid (difficulty) voor je wereld instellen door één van deze commando’s te kiezen:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/mvm <span class="built_in">set</span> diff peaceful &lt;naam-van-je-wereld&gt;</div><div class="line">/mvm <span class="built_in">set</span> diff easy &lt;naam-van-je-wereld&gt;</div><div class="line">/mvm <span class="built_in">set</span> diff normal &lt;naam-van-je-wereld&gt;</div><div class="line">/mvm <span class="built_in">set</span> diff hard &lt;naam-van-je-wereld&gt;</div></pre></td></tr></table></figure>
<h3 id="Monsters-en-dieren-uitschakelen"><a href="#Monsters-en-dieren-uitschakelen" class="headerlink" title="Monsters en dieren uitschakelen"></a>Monsters en dieren uitschakelen</h3><p>Als je niet wilt dat er monsters of dieren in je wereld spawnen gebruik je één van de volgende
commando’s:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/mvm <span class="built_in">set</span> monsters <span class="literal">false</span> &lt;naam-van-je-wereld&gt;</div><div class="line">/mvm <span class="built_in">set</span> animals <span class="literal">false</span> &lt;naam-van-je-wereld&gt;</div></pre></td></tr></table></figure>
<h3 id="Bestaande-monsters-en-dieren-verwijderen"><a href="#Bestaande-monsters-en-dieren-verwijderen" class="headerlink" title="Bestaande monsters en dieren verwijderen"></a>Bestaande monsters en dieren verwijderen</h3><p>Soms zijn er al monsters of dieren gespawned in je wereld. Gebruik één van de volgende commando’s
om ze uit je wereld te verwijderen:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/mv purge &lt;naam-van-je-wereld&gt; monsters</div><div class="line">/mv purge &lt;naam-van-je-wereld&gt; animals</div></pre></td></tr></table></figure>
<h3 id="Weer-instellen"><a href="#Weer-instellen" class="headerlink" title="Weer instellen"></a>Weer instellen</h3><p>Met het volgende commando kun je het weer voor je wereld uitschakelen:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mvm <span class="built_in">set</span> weather <span class="literal">false</span> &lt;naam-van-je-wereld&gt;</div></pre></td></tr></table></figure>
<h3 id="Wereld-verwijderen"><a href="#Wereld-verwijderen" class="headerlink" title="Wereld verwijderen"></a>Wereld verwijderen</h3><p>Denk altijd goed na voordat je een wereld weggooit en maak het liefst eerst een backup zodat je
nooit per ongeluk al het werk van je spelers weggooit!</p>
<p>Om een wereld te verwijderen voer je eerst dit commando uit:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mv delete &lt;naam-van-je-wereld&gt;</div></pre></td></tr></table></figure>
<p>Daarna moet je binnen 15 seconden bevestigen met:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mvconfirm</div></pre></td></tr></table></figure>
<h2 id="Multiverse-Portals"><a href="#Multiverse-Portals" class="headerlink" title="Multiverse Portals"></a>Multiverse Portals</h2><ul>
<li><a href="http://dev.bukkit.org/bukkit-plugins/multiverse-portals/" target="_blank" rel="external">Multiverse-Portals plugin</a></li>
<li><a href="https://github.com/Multiverse/Multiverse-Portals/wiki/Basic-portal-tutorial" target="_blank" rel="external">Multiverse-Portal voorbeeld</a></li>
</ul>
<h3 id="Nieuw-portaal-maken"><a href="#Nieuw-portaal-maken" class="headerlink" title="Nieuw portaal maken"></a>Nieuw portaal maken</h3><p><strong>Let op:</strong> je kunt geen portals maken als de <code>Worldedit</code> plugin aanstaat dus zorg er eerst voor
dat je de Worledit plugin uitschakelt. Nadat je het portal gemaakt hebt kun je Worldedit plugin
weer inschakelen.</p>
<p>Om een nieuw portal te maken bouw je eerst een structuur zoals in het voorbeeld hieronder:</p>
<p>Zet daarna de portal wand aan met dit commando:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mvp wand</div></pre></td></tr></table></figure>
<p>Stel nu het 1e coordinaat in door met je wand linksonderin je structuur te klikken, klik daarna
rechtsboven om het 2e coordinaat in stellen.</p>
<p>Als het goed is kun je nu je portal naar een andere wereld aanmaken met het volgende commando:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mvp create &lt;naam-van-je-portal&gt; w:&lt;naam-van-de-wereld-waar-het-portal-uitkomt&gt;</div></pre></td></tr></table></figure>
<p><strong>Let op:</strong> je kunt je portal vullen met alles behalve nether, nether zorgt er voor dat je portal
niet zal werken. Een goed alternatief is lava of water.</p>
<h3 id="Portal-vrijgeven-rechten"><a href="#Portal-vrijgeven-rechten" class="headerlink" title="Portal vrijgeven (rechten)"></a>Portal vrijgeven (rechten)</h3><p>Standaard kunnen alleen OPs je nieuwe portal gebruiken en dat is meestal niet waar je ze voor
gebouwd hebt. Om er voor te zorgen dat ook normale spelers de portals kunnen gebruiken voer je
deze twee commando’s uit:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/mv conf enforceaccess <span class="literal">false</span></div><div class="line">/mvp conf enforceportalaccess <span class="literal">false</span></div></pre></td></tr></table></figure>
<h2 id="Multiverse-tweaks"><a href="#Multiverse-tweaks" class="headerlink" title="Multiverse tweaks"></a>Multiverse tweaks</h2><h3 id="Chat-prefix-uitschakelen"><a href="#Chat-prefix-uitschakelen" class="headerlink" title="Chat prefix uitschakelen"></a>Chat prefix uitschakelen</h3><p>Multiverse zet de naam van de wereld van waaruit gechat wordt voor het chatbericht en dat is….
gewoon irritant. Schakel het uit met het volgende commando:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mv conf prefixchat <span class="literal">false</span></div></pre></td></tr></table></figure>
<h2 id="OPs"><a href="#OPs" class="headerlink" title="OPs"></a>OPs</h2><p>Om te zien wie er allemaal OP zijn op je server:</p>
<ol>
<li>log in op de website</li>
<li>Ga naar <code>Files</code> &gt; <code>FTP File Access</code></li>
<li>open het bestand <code>ops.json</code></li>
</ol>
<h2 id="HomeSpawnPlus"><a href="#HomeSpawnPlus" class="headerlink" title="HomeSpawnPlus"></a>HomeSpawnPlus</h2><p>Gebruik de <a href="http://dev.bukkit.org/bukkit-plugins/homespawnplus/" target="_blank" rel="external">HomeSpawnPlus</a>
plugin om in te stellen dat iedere speler bij het inloggen (joinen)
in een bepaalde Multiverse wereld terecht komt. Bijvoorbeeld handig als je wilt
dat iedereen na het inloggen in je hub wereld terecht komt.</p>
<h3 id="Spawn-instellen-voor-een-wereld"><a href="#Spawn-instellen-voor-een-wereld" class="headerlink" title="Spawn instellen voor een wereld"></a>Spawn instellen voor een wereld</h3><p>Om de spawn in te stellen voor een wereld <strong>ga je eerst naar die wereld</strong>. Zoek daarna een mooi
plekje om te spawnen en voer het volgende command uit:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/setspawn</div></pre></td></tr></table></figure>
<h3 id="Standaard-spawn-instellen-voor-je-server"><a href="#Standaard-spawn-instellen-voor-je-server" class="headerlink" title="Standaard spawn instellen voor je server"></a>Standaard spawn instellen voor je server</h3><p>Volg deze stappen om iedere speler die je server bezoekt via dezelfde spawn binnen te laten komen.</p>
<p>Stel eerst de naam van de wereld in die je als standaard wereld wilt gebruiken.
Open hiervoor <code>core.yml</code> en pas de <code>defaultWorld</code> aan. Hieronder zie je
een voorbeeld waarbij de wereld <code>hub</code> als standaard wereld wordt gebruikt.</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The default/main world. Strategies reference this as the default</span></div><div class="line"><span class="comment"># world, you can change that here if you like.</span></div><div class="line"><span class="attr">defaultWorld:</span> hub</div></pre></td></tr></table></figure>
<p>Open daarna <code>events.yml</code> en stel bij het <code>onJoin</code> event in dat de wereld
die je hierboven als standaard wereld hebt ingesteld (hub) moet bij het joinen
van je server als spawn wereld (spawnDefaultWorld) moet worden gebruikt:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">events:</span></div><div class="line">  <span class="comment"># strategies to use when player is joining the game</span></div><div class="line"><span class="attr">  onJoin:</span></div><div class="line"><span class="bullet">    -</span> spawnNewPlayer</div><div class="line"><span class="bullet">    -</span> spawnDefaultWorld</div></pre></td></tr></table></figure>
<p>Reload je server en iedereen (ook OPs) landen voortaan netjes in je hub wereld.</p>
<h2 id="SuperLogger"><a href="#SuperLogger" class="headerlink" title="SuperLogger"></a>SuperLogger</h2><p>De <a href="https://github.com/zack6849/SuperLogger" target="_blank" rel="external">SuperLogger</a> plugin houdt bij
wie allemaal inlogt op je server en welke commando’s men wanneer uitgevoerd heeft. Handig als je
bijvoorbeeld wilt weten wie iemand OP heeft gegeven.</p>
<ol>
<li>log in op de website</li>
<li>Ga naar <code>Files</code> &gt; <code>FTP File Access</code></li>
<li>Open de map <code>Plugins</code> &gt; <code>SuperLogger</code></li>
<li>De logs kun je per dag vinden in de map <code>logs</code></li>
</ol>
<p>Instellingen kun je aanpassen in <code>config.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="attr">auto-update:</span> <span class="literal">true</span></div><div class="line"><span class="attr">update-notify:</span> <span class="literal">true</span></div><div class="line"><span class="attr">debug:</span> <span class="literal">false</span></div><div class="line"><span class="attr">log:</span></div><div class="line"><span class="attr">  commands:</span> <span class="literal">true</span></div><div class="line">  <span class="comment">#do we check if a command is even a real command before we log it?</span></div><div class="line"><span class="attr">  check-command-exists:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  chat:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  join:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  quit:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  kick:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  death:</span> <span class="literal">false</span></div><div class="line">  <span class="comment">#do we log disallowed connections? (banned, not whitelisted, full server, etc)</span></div><div class="line"><span class="attr">  failed-connections:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  player-ip:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  player-uuid:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  coordinates:</span> <span class="literal">true</span></div><div class="line"><span class="comment">#a list of commands ignored by superlogger, for privacy reasons.</span></div><div class="line"><span class="attr">blacklist:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">'login'</span></div><div class="line"><span class="bullet">  -</span> <span class="string">'register'</span></div></pre></td></tr></table></figure>
<h2 id="BetterAlias"><a href="#BetterAlias" class="headerlink" title="BetterAlias"></a>BetterAlias</h2><p>Met de <a href="http://dev.bukkit.org/bukkit-plugins/betteralias/" target="_blank" rel="external">BetterAlias</a> plugin kun je aliassen
aanmaken zodat je met één woord een moeilijk commando kunt laten uitvoeren. Bijvoorbeeld handig
als je spelers naar een wereld wilt laten tp’en met 1 commando.</p>
<ol>
<li>log in op de website</li>
<li>Ga naar <code>Files</code> &gt; <code>FTP File Access</code></li>
<li>Open de map <code>Plugins</code> &gt; <code>BetterAlias</code></li>
<li>Voeg een alias toe aan het bestand <code>aliases.yml</code></li>
</ol>
<p>Hieronder zie je een paar voorbeelden. Als iemand wil pvp’en hoeft hij alleen nog maar het
alias <code>/pvp</code> in te tikken, het commando <code>/mv tp topsy-vale</code> wordt dan automatisch voor hem
uitgevoerd.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">hub:</span></div><div class="line">    <span class="number">0</span>: /mv tp hub</div><div class="line"></div><div class="line"><span class="attr">creative:</span></div><div class="line">    <span class="number">0</span>: /mv tp plotworld</div><div class="line"></div><div class="line"><span class="attr">pvp:</span></div><div class="line">    <span class="number">0</span>: /mv tp topsy-vale</div><div class="line"></div><div class="line"><span class="attr">factions:</span></div><div class="line">    <span class="number">0</span>: /mv tp factions1</div><div class="line"></div><div class="line"><span class="attr">kingdom:</span></div><div class="line">    <span class="number">0</span>: /mv tp kingdom1</div></pre></td></tr></table></figure>
<h2 id="Per-World-Inventory"><a href="#Per-World-Inventory" class="headerlink" title="Per World Inventory"></a>Per World Inventory</h2><p>De <a href="http://www.spigotmc.org/resources/per-world-inventory.4482/" target="_blank" rel="external">Per World Inventory</a> plugin
maakt het mogelijk om voor iedere Multiverse wereld een aparte inventory te maken.</p>
<p>Hiervoor moet de plugin wel vertellen welke werelden er allemaal op je server bestaan.</p>
<ol>
<li>log in op de website</li>
<li>Ga naar <code>Files</code> &gt; <code>FTP File Access</code></li>
<li>Open de map <code>Plugins</code> &gt; <code>PerWorldInventory</code></li>
<li>Open het bestand <code>worlds.yml</code></li>
</ol>
<p>Maak groepen aan voor <strong>alle</strong> werelden op je server die een eigen inventory moeten hebben (of delen).</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="attr">groups:</span></div><div class="line"><span class="attr">  default:</span></div><div class="line"><span class="attr">    worlds:</span></div><div class="line"><span class="bullet">    -</span> hub</div><div class="line"><span class="attr">  kitbattle:</span></div><div class="line"><span class="attr">    worlds:</span></div><div class="line"><span class="bullet">    -</span> topsy-vale</div><div class="line"><span class="bullet">    -</span> topsy-vale_nether</div><div class="line"><span class="bullet">    -</span> topsy-vale_the_end</div><div class="line"><span class="attr">  kingdom:</span></div><div class="line"><span class="attr">    worlds:</span></div><div class="line"><span class="bullet">    -</span> kingdom1</div><div class="line"><span class="attr">  creative:</span></div><div class="line"><span class="attr">    worlds:</span></div><div class="line"><span class="bullet">    -</span> plotworld</div><div class="line"><span class="attr">  factions:</span></div><div class="line"><span class="attr">    worlds:</span></div><div class="line"><span class="bullet">    -</span> factions1</div></pre></td></tr></table></figure>
<h2 id="PlotMe"><a href="#PlotMe" class="headerlink" title="PlotMe"></a>PlotMe</h2><p>Met de <a href="http://dev.bukkit.org/bukkit-plugins/plotme/" target="_blank" rel="external">PlotMe</a> plugin kun je eenvoudig een
coole creative wereld maken met professionele plot features. <strong>Let op</strong>: de plugin zit niet
in Spigot, je moet ‘m handmatig installeren.</p>
<p>Eerst moet de wereld aangemaakt worden met dit Minecraft commando:</p>
<p><code>/mv create plotworld normal -g PlotMe-DefaultGenerator</code></p>
<p>De wereld is nu aangemaakt maar voordat normale spelers er gebruik van
kunnen maken moet je ze eerst <code>plotme.use</code> rechten geven in PermissionsEx.</p>
<ol>
<li>log in op de website</li>
<li>Ga naar <code>Files</code> &gt; <code>FTP File Access</code></li>
<li>Open de map <code>Plugins</code> &gt; <code>PermissionsEx</code></li>
<li>Open het bestand <code>permissions.yml</code></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">groups:</span></div><div class="line"><span class="attr">  default:</span></div><div class="line"><span class="attr">    options:</span></div><div class="line"><span class="attr">      default:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    permissions:</span></div><div class="line"><span class="bullet">    -</span> modifyworld.*</div><div class="line"><span class="bullet">    -</span> herochat.join.*</div><div class="line"><span class="bullet">    -</span> herochat.speak.*</div><div class="line"><span class="bullet">    -</span> herochat.leave.*</div><div class="line"><span class="bullet">    -</span> plotme.use</div></pre></td></tr></table></figure>
<p>Nu alleen nog je server reloaden en je spelers kunnen aan de slag met hun plots.</p>
<p><strong>Let op:</strong> vergeet je nieuwe wereld niet toe te voegen aan het lijstje met <code>PerWorldInventory</code>
werelden!</p>
<h2 id="Coole-MOTD"><a href="#Coole-MOTD" class="headerlink" title="Coole MOTD"></a>Coole MOTD</h2><p>De Message Of The Day (MOTD) van je server is wat spelers zien in de lijst met servers als ze een
potje online willen spelen. Standaard zie je daar een saaie grijze tekst maar die kun je pimpen door
verschillende lettertypes (dik, dun, doorgestreept) s en een combinatie van kleuren te gebruiken.</p>
<p>Hou er wel rekening mee dat het niet eenvoudig is om een coole MOTD te maken en dat je eerst zult
moeten begrijpen hoe de codes voor kleuren en lettertypes werken. Maar als je dat eenmaal doorhebt
maak je al snel de coolste MOTDs.</p>
<h3 id="Kleurcodes"><a href="#Kleurcodes" class="headerlink" title="Kleurcodes"></a>Kleurcodes</h3><p>Voor het voorbeeld dat straks komt hoef je alleen de vier kleuren te kennen die hieronder staan.
Als je andere kleuren wilt gebruiken bezoek dan <a href="http://minecraft.gamepedia.com/Classic_server_protocol" target="_blank" rel="external">deze link</a>.</p>
<table>
<thead>
<tr>
<th>Kleur</th>
<th>code</th>
</tr>
</thead>
<tbody>
<tr>
<td>rood</td>
<td>\u00A7c</td>
</tr>
<tr>
<td>geel</td>
<td>\u00A7e</td>
</tr>
<tr>
<td>roze</td>
<td>\u00A7d</td>
</tr>
<tr>
<td>donkergrijs</td>
<td>\u00A78</td>
</tr>
</tbody>
</table>
<h3 id="Lettertypes"><a href="#Lettertypes" class="headerlink" title="Lettertypes"></a>Lettertypes</h3><p>Met deze lettertypes kun je nog meer variatie aanbrengen in je MOTD:</p>
<table>
<thead>
<tr>
<th>Lettertype</th>
<th>code</th>
</tr>
</thead>
<tbody>
<tr>
<td>dik</td>
<td>\u00A7l</td>
</tr>
<tr>
<td>doorgehaald</td>
<td>\u00A7m</td>
</tr>
<tr>
<td>reset</td>
<td>\u00A7r</td>
</tr>
</tbody>
</table>
<h3 id="Je-eigen-MOTD-maken"><a href="#Je-eigen-MOTD-maken" class="headerlink" title="Je eigen MOTD maken"></a>Je eigen MOTD maken</h3><p>Hieronder zie je een paar voorbeelden van een gepimpte MOTD. Als je goed kijkt zie je dat er
codes voor de tekst staan, die code codes bepalen hoe de tekst wordt weergegeven.</p>
<p><strong>Let op</strong> zorg er voor dat je altijd eerst de kleurcode gebruikt en dan pas de lettercode (anders
snapt Minecraft het niet)</p>
<p>Een voorbeeld van een MOTD met maar één regel:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\u00A7c\u00A7m------\u00A7r\u00A7c\u00A7l[\u00A7e\u00A7lMijnServer\u00A7c\u00A7l]\u00A7c\u00A7m------</div></pre></td></tr></table></figure>
<p>Een voorbeeld van een MOTD met twee regels (de \n zorgt dat de rest op regel 2 terecht komt):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\u00A7c\u00A7m------\u00A7r\u00A7c\u00A7l[\u00A7e\u00A7lMijnServer\u00A7c\u00A7l]\u00A7c\u00A7m------\n\u00A7r\u00A78PVP | FACTIONS | KINGDOM | CREA | \u00A7d\u00A7lALTIJD GEZELLIG</div></pre></td></tr></table></figure>
<h3 id="Je-MOTD-bijwerken"><a href="#Je-MOTD-bijwerken" class="headerlink" title="Je MOTD bijwerken"></a>Je MOTD bijwerken</h3><p>Om je nieuwe MOTD zichtbaar te maken in de serverlijst:</p>
<ol>
<li>log in op de website</li>
<li>Ga naar <code>Files</code> &gt;  <code>Config files</code></li>
<li>Open <code>Server Settings</code></li>
<li>Kopieer je eigen MOTD en plak deze in het veld naast <code>Server Message</code></li>
<li>Druk op <code>Save</code> onderaan de pagina om op te slaan</li>
<li>Reload je server om de nieuwe MOTD te activeren</li>
</ol>
<h1 id="Handige-links"><a href="#Handige-links" class="headerlink" title="Handige links"></a>Handige links</h1><ul>
<li><a href="http://minecraft.gamepedia.com/Classic_server_protocol" target="_blank" rel="external">Klassieke Minecraft kleurcodes</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Multiverse&quot;&gt;&lt;a href=&quot;#Multiverse&quot; class=&quot;headerlink&quot; title=&quot;Multiverse&quot;&gt;&lt;/a&gt;Multiverse&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dev.bukkit.org/b
    
    </summary>
    
      <category term="Minecraft" scheme="http://bravo-kernel.com/categories/minecraft/"/>
    
    
      <category term="minecraft" scheme="http://bravo-kernel.com/tags/minecraft/"/>
    
      <category term="dutch" scheme="http://bravo-kernel.com/tags/dutch/"/>
    
  </entry>
  
  <entry>
    <title>How to add JWT Authentication to a CakePHP 3 REST API</title>
    <link href="http://bravo-kernel.com/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/"/>
    <id>http://bravo-kernel.com/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/</id>
    <published>2015-04-20T07:22:32.000Z</published>
    <updated>2017-03-22T13:48:35.310Z</updated>
    
    <content type="html"><![CDATA[<p>In this follow-up post to
<a href="/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/">How to prefix route a CakePHP 3 REST API</a>
we will implement <a href="http://jwt.io/" target="_blank" rel="external">JSON Web Token</a> (JWT) authentication.</p>
<p><a href="https://app.getpostman.com/run-collection/197398a609a6d233a8c2" target="_blank" rel="external"><img src="https://run.pstmn.io/button.svg" alt="Run in Postman"></a></p>
<p>To prevent (yet another) partial/pointless JWT tutorial we will provide you with step-by-step
instructions:</p>
<ul>
<li>describing a full blown, real world implementation</li>
<li>usable as drop-in code for (almost) any CakePHP 3 application requiring API authentication</li>
<li>spiced up with background information to help you understand the JWT concept</li>
</ul>
<blockquote>
<p><strong>Important</strong>: please remember to use SSL/TLS encrypted connections for ALL API traffic
to prevent man in the middle attackers from seeing and stealing the tokens.</p>
</blockquote>
<p>During this tutorial you will:</p>
<ul>
<li>add some basic user data to the application</li>
<li>enable password hashing</li>
<li>add the JWT plugin</li>
<li>update your prefix route</li>
<li>enable JWT Authentication for API resources</li>
<li>create the API UsersController</li>
<li>implement user registration using the API</li>
<li>sanity check your first JWT token</li>
<li>implement JWT token requests</li>
<li>test JWT protected API resources</li>
</ul>
<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>To complete this tutorial you will need a fully configurable REST client like:</p>
<ul>
<li><a href="https://www.getpostman.com/docs/introduction" target="_blank" rel="external">Postman</a></li>
<li>the <a href="https://addons.mozilla.org/nl/firefox/addon/restclient/" target="_blank" rel="external">RESTClient</a> plugin for Firefox</li>
<li>the <a href="http://mmattozzi.github.io/cocoa-rest-client/" target="_blank" rel="external">Cocoa REST Client</a> if you are on a Mac</li>
</ul>
<h2 id="Before-We-Begin"><a href="#Before-We-Begin" class="headerlink" title="Before We Begin"></a>Before We Begin</h2><p>This is part four of the CakePHP 3 REST API tutorial series:</p>
<ol>
<li><a href="/2015/04/how-to-build-a-cakephp-3-rest-api-in-minutes/">How to build a CakePHP 3 REST API in minutes</a></li>
<li><a href="/2015/04/how-to-use-a-cakephp-3-rest-api/">How to use a CakePHP 3 REST API</a></li>
<li><a href="/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/">How to prefix route a CakePHP 3 REST API</a></li>
<li>How to add JWT Authentication to a CakePHP 3 REST API</li>
<li><a href="/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/">How to make your CakePHP 3 API produce JSON API</a></li>
<li><a href="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/">How to use a CakePHP API as the data backend for Ember in 30 minutes</a></li>
</ol>
<p>Before starting this tutorial either:</p>
<ul>
<li>complete the previous posts</li>
<li>start fresh by using these
<a href="https://github.com/bravo-kernel/application-examples/tree/master/blog-how-to-prefix-route-a-cakephp3-rest-api" target="_blank" rel="external">end-state application sources</a>,
composer installing and running the database migration</li>
</ul>
<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>The web is already filled with information about JSON Web Token (JWT) Authentication so we will not
duplicate it here but in a nutshell it allows authenticating users against a single token instead
of the more commonly used username/password.</p>
<p>As a side effect our API will benefit from some (very cool) additional JWT functionality like:</p>
<ul>
<li>No more need for sessions</li>
<li>No more need to protect our API against Cross-Site Request Forgery (CSRF)</li>
<li>Support for granular security through the use of JWT scopes</li>
</ul>
<h2 id="2-Adding-Users-To-The-Application"><a href="#2-Adding-Users-To-The-Application" class="headerlink" title="2. Adding Users To The Application"></a>2. Adding Users To The Application</h2><h3 id="Populate-the-database"><a href="#Populate-the-database" class="headerlink" title="Populate the database"></a>Populate the database</h3><p>Download this CakePHP
<a href="https://github.com/bravo-kernel/application-examples/blob/master/blog-how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/config/Migrations/20150420112310_users.php" target="_blank" rel="external">database migration file</a>
to your <code>config/Migrations</code> directory.</p>
<p>Now run the following command inside your application’s root directory to
create the <code>users</code> table:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/cake migrations migrate</div></pre></td></tr></table></figure>
<h3 id="Generate-the-basic-controller-entity-table-and-views"><a href="#Generate-the-basic-controller-entity-table-and-views" class="headerlink" title="Generate the basic controller, entity, table and views"></a>Generate the basic controller, entity, table and views</h3><p>To prepare for testing “basic” HTML access generate the required controller, entity, table and views
by running the following command inside your application’s root directory:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/cake bake all Users</div></pre></td></tr></table></figure>
<h3 id="Configure-Password-Hashing"><a href="#Configure-Password-Hashing" class="headerlink" title="Configure Password Hashing"></a>Configure Password Hashing</h3><p>CakePHP 3 comes with a convenient <a href="http://book.cakephp.org/3.0/en/controllers/components/authentication.html#hashing-passwords" target="_blank" rel="external">PasswordHasher</a>
that will automatically encrypt user passwords using the very strong
<a href="http://en.wikipedia.org/wiki/Bcrypt" target="_blank" rel="external">bcrypt</a> hashing algorithm.
To enable password hashing for your application make sure to add both the class and the method shown below to <code>src/Model/Entity/User.php</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Auth</span>\<span class="title">DefaultPasswordHasher</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_setPassword</span><span class="params">($password)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> DefaultPasswordHasher)-&gt;hash($password);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="Verify"><a href="#Verify" class="headerlink" title="Verify"></a>Verify</h3><p>If things went well you should now be able to:</p>
<ul>
<li>browse to <code>http://cake3api.app/users</code></li>
<li>create a new user</li>
<li>see the created user with hashed password</li>
</ul>
<p><br></p>
<img src="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/browser-users-index.png" alt="Users index" title="Users index">
<h2 id="3-Adding-the-JWT-Plugin"><a href="#3-Adding-the-JWT-Plugin" class="headerlink" title="3. Adding the JWT Plugin"></a>3. Adding the JWT Plugin</h2><p>Run the following command inside your application’s root directory to
composer install the <a href="https://github.com/ADmad/cakephp-jwt-auth" target="_blank" rel="external">JwtAuth plugin</a>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require admad/cakephp-jwt-auth</div></pre></td></tr></table></figure>
<p>Now run the following command to make your application use the plugin:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/cake plugin load ADmad/JwtAuth</div></pre></td></tr></table></figure>
<h2 id="4-Updating-The-Prefix-Route"><a href="#4-Updating-The-Prefix-Route" class="headerlink" title="4. Updating The Prefix Route"></a>4. Updating The Prefix Route</h2><p>The API prefix route created during the previous tutorial needs updating:</p>
<ul>
<li>to enable the <code>Api\UsersController</code> for API usage</li>
<li>to connect custom action <code>/register</code> to standard <a href="">CRUD Plugin</a> action <code>/add</code></li>
<li>to automatically create routes for the non-standard <code>/register</code> and <code>/token</code> actions</li>
</ul>
<p><strong>Pro tip:</strong> we connect the <code>/register</code> action so we can simply extend the CRUD Plugin <code>add()</code>
method and benefit of already available logic like validation and response codes instead of having to
reinvent the wheel.</p>
<p>Make sure to update the <code>api</code> prefix route in <code>config/routes.php</code> to resemble:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Router::prefix(<span class="string">'api'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($routes)</span> </span>&#123;</div><div class="line">    $routes-&gt;extensions([<span class="string">'json'</span>, <span class="string">'xml'</span>]);</div><div class="line">    $routes-&gt;resources(<span class="string">'Cocktails'</span>);</div><div class="line">    $routes-&gt;resources(<span class="string">'Users'</span>);</div><div class="line">    Router::connect(<span class="string">'/api/users/register'</span>, [<span class="string">'controller'</span> =&gt; <span class="string">'Users'</span>, <span class="string">'action'</span> =&gt; <span class="string">'add'</span>, <span class="string">'prefix'</span> =&gt; <span class="string">'api'</span>]);</div><div class="line">    $routes-&gt;fallbacks(<span class="string">'InflectedRoute'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="5-Enabling-JWT-Authentication"><a href="#5-Enabling-JWT-Authentication" class="headerlink" title="5. Enabling JWT Authentication"></a>5. Enabling JWT Authentication</h2><p>To enable JWT Authentication for all API resources extend the
<code>src/Controller/Api/AppController.php</code> file created during the previous tutorial with the following
<code>initialize</code> method so the file looks similar to:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>\<span class="title">Api</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Controller</span>\<span class="title">Controller</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Event</span>\<span class="title">Event</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">use</span> \<span class="title">Crud</span>\<span class="title">Controller</span>\<span class="title">ControllerTrait</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::initialize();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;loadComponent(<span class="string">'RequestHandler'</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;loadComponent(<span class="string">'Crud.Crud'</span>, [</div><div class="line">            <span class="string">'actions'</span> =&gt; [</div><div class="line">                <span class="string">'Crud.Index'</span>,</div><div class="line">                <span class="string">'Crud.View'</span>,</div><div class="line">                <span class="string">'Crud.Add'</span>,</div><div class="line">                <span class="string">'Crud.Edit'</span>,</div><div class="line">                <span class="string">'Crud.Delete'</span></div><div class="line">            ],</div><div class="line">            <span class="string">'listeners'</span> =&gt; [</div><div class="line">                <span class="string">'Crud.Api'</span>,</div><div class="line">                <span class="string">'Crud.ApiPagination'</span>,</div><div class="line">                <span class="string">'Crud.ApiQueryLog'</span></div><div class="line">            ]</div><div class="line">        ]);</div><div class="line">        <span class="keyword">$this</span>-&gt;loadComponent(<span class="string">'Auth'</span>, [</div><div class="line">            <span class="string">'storage'</span> =&gt; <span class="string">'Memory'</span>,</div><div class="line">            <span class="string">'authenticate'</span> =&gt; [</div><div class="line">                <span class="string">'Form'</span> =&gt; [</div><div class="line">                    <span class="string">'scope'</span> =&gt; [<span class="string">'Users.active'</span> =&gt; <span class="number">1</span>]</div><div class="line">                ],</div><div class="line">                <span class="string">'ADmad/JwtAuth.Jwt'</span> =&gt; [</div><div class="line">                    <span class="string">'parameter'</span> =&gt; <span class="string">'token'</span>,</div><div class="line">                    <span class="string">'userModel'</span> =&gt; <span class="string">'Users'</span>,</div><div class="line">                    <span class="string">'scope'</span> =&gt; [<span class="string">'Users.active'</span> =&gt; <span class="number">1</span>],</div><div class="line">                    <span class="string">'fields'</span> =&gt; [</div><div class="line">                        <span class="string">'username'</span> =&gt; <span class="string">'id'</span></div><div class="line">                    ],</div><div class="line">                    <span class="string">'queryDatasource'</span> =&gt; <span class="keyword">true</span></div><div class="line">                ]</div><div class="line">            ],</div><div class="line">            <span class="string">'unauthorizedRedirect'</span> =&gt; <span class="keyword">false</span>,</div><div class="line">            <span class="string">'checkAuthIn'</span> =&gt; <span class="string">'Controller.initialize'</span></div><div class="line">        ]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Notes:</strong></p>
<ul>
<li>we use <code>Memory</code> based non-persistent storage for the authenticated user
(instead of Cake’s session based default)</li>
<li>FormAuthenticate MUST be included here or AuthComponent will not be able to validate the
posted (non-JWT) JSON credentials during the <code>/token</code> action</li>
<li>by enabling <code>queryDataSource</code> the <code>sub</code> field in the JWT token will be used
to query the database for user information (using the User model)</li>
<li><code>checkAuthIn</code> makes user information available in all Controller
<code>beforeFilter()</code> functions</li>
</ul>
<h3 id="Verify-Authentication-Is-Enabled"><a href="#Verify-Authentication-Is-Enabled" class="headerlink" title="Verify Authentication Is Enabled"></a>Verify Authentication Is Enabled</h3><p>To verify your API resources now actually require authentication query
<code>http://cake3api.app/api/cocktails.json</code>.</p>
<p>Should return Status Code 401 (Unauthorized) with a JSON response body similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"data"</span>: &#123;</div><div class="line">        <span class="attr">"message"</span>: <span class="string">"You are not authorized to access that location."</span>,</div><div class="line">        <span class="attr">"url"</span>: <span class="string">"\/api\/cocktails.json"</span>,</div><div class="line">        <span class="attr">"code"</span>: <span class="number">401</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-Creating-the-API-UsersController"><a href="#6-Creating-the-API-UsersController" class="headerlink" title="6. Creating the API UsersController"></a>6. Creating the API UsersController</h2><p>We will now create a UsersController responsible for handling all authentication in the <code>Api</code> namespace:</p>
<ul>
<li>using standard <a href="http://book.cakephp.org/3.0/en/controllers/components/authentication.html#making-actions-public" target="_blank" rel="external">AuthComponent allow logic</a>
to allow non-authenticated access to the <code>/add</code> and <code>/token</code> actions</li>
<li>already containing all required <code>use</code> statements required later on</li>
</ul>
<p>Create new file <code>src/Controller/Api/UsersController</code> with the following code:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>\<span class="title">Api</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Event</span>\<span class="title">Event</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Network</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedException</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Utility</span>\<span class="title">Security</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">JWT</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> <span class="keyword">extends</span> <span class="title">AppController</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::initialize();</div><div class="line">        <span class="keyword">$this</span>-&gt;Auth-&gt;allow([<span class="string">'add'</span>, <span class="string">'token'</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> Auth-allowed actions MUST be set inside <code>initialize()</code>
because we enabled the <code>checkAuthIn</code> configuration option.</p>
<h2 id="7-Implementing-API-User-Registration"><a href="#7-Implementing-API-User-Registration" class="headerlink" title="7. Implementing API User Registration"></a>7. Implementing API User Registration</h2><h3 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h3><p>User registration through the API does not require JWT authentication and is basically a matter of
posting valid JSON data to the <code>/add</code> action in our UsersController so the <a href="xx">CRUD Plugin</a>
can handle validation and creating the user record.</p>
<p>If the user is created succesfully a JSON 201 response (Created) will be returned with a response
body containing:</p>
<ul>
<li>the id of the new user</li>
<li>a <code>token</code> field containing the new user’s JWT token</li>
</ul>
<p><br></p>
<img src="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/jwt-primer-registration.png" alt="JWT primer: user registration" title="JWT primer: user registration">
<h3 id="Create-the-register-action"><a href="#Create-the-register-action" class="headerlink" title="Create the /register  action"></a>Create the /register  action</h3><p>Because the CRUD plugin normally only returns the id of the new record we will add the JWT token
to the JSON response body by extending the <code>add()</code> method with some custom CRUD
<a href="http://crud.readthedocs.org/en/latest/actions/add.html#crud-aftersave" target="_blank" rel="external">afterSave</a>
and <a href="http://crud.readthedocs.org/en/latest/actions/add.html#serialize" target="_blank" rel="external">serialize</a> logic.</p>
<p>To implement user registration add the following <code>add()</code> method to <code>src/Controller/Api/UsersController.php</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;Crud-&gt;on(<span class="string">'afterSave'</span>, <span class="function"><span class="keyword">function</span><span class="params">(Event $event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ($event-&gt;subject-&gt;created) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;set(<span class="string">'data'</span>, [</div><div class="line">                <span class="string">'id'</span> =&gt; $event-&gt;subject-&gt;entity-&gt;id,</div><div class="line">                <span class="string">'token'</span> =&gt; JWT::encode(</div><div class="line">                    [</div><div class="line">                        <span class="string">'sub'</span> =&gt; $event-&gt;subject-&gt;entity-&gt;id,</div><div class="line">                        <span class="string">'exp'</span> =&gt;  time() + <span class="number">604800</span></div><div class="line">                    ],</div><div class="line">                Security::salt())</div><div class="line">            ]);</div><div class="line">            <span class="keyword">$this</span>-&gt;Crud-&gt;action()-&gt;config(<span class="string">'serialize.data'</span>, <span class="string">'data'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;Crud-&gt;execute();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> even though this is not required we are adding the <a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#expDef" target="_blank" rel="external">JWT exp claim</a>
to the token payload so the token will expire after one week, effectively forcing the user to request
a new unique token using the <code>/token</code> action.</p>
<p><strong>Important:</strong> your JWT token (and thus the user information) will NOT
contain an <code>id</code> field if you choose to  disable the <code>queryDataSource</code> option.
This might might break code depending on the presence of an <code>id</code> field but
is easily solved  by manually adding the <code>id</code> field to the JWT token
(below <code>exp</code> in the code above).</p>
<h3 id="Verify-User-Registration"><a href="#Verify-User-Registration" class="headerlink" title="Verify User Registration"></a>Verify User Registration</h3><p>To verify your setup register a new user by posting JSON data to your API using:</p>
<ul>
<li>URL <code>http://cake3api.app/api/users/register</code></li>
<li><strong>HTTP Method</strong> <code>POST</code></li>
<li><strong>Accept Header</strong> <code>application/json</code></li>
<li><strong>Content-Type Header</strong> <code>application/json</code></li>
<li>Body data in (absolutely) correct JSON format</li>
</ul>
<img src="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/api-request-register.png" alt="API Request Headers for register action" title="API Request Headers for register action">
<p>Should return Status Code 201 (Created) with a JSON response body containing
the user id and JWT token similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">        <span class="attr">"token"</span>: <span class="string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.q2chPMiKRzwrO3v48fi90HyJPHDLOXtwEKr7EcU3GPk"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-Sanity-Checking-JWT-Tokens"><a href="#8-Sanity-Checking-JWT-Tokens" class="headerlink" title="8. Sanity Checking JWT Tokens"></a>8. Sanity Checking JWT Tokens</h2><p>Now that you have received your first JWT token it might be a good time to verify that your token
is valid by:</p>
<ul>
<li>browsing to <a href="http://jwt.io/" target="_blank" rel="external">http://jwt.io/</a></li>
<li>pasting your token in the <code>Encoded</code> field</li>
<li>replacing the secret value with the <code>Salt</code> value found in your <code>config/app.php</code></li>
</ul>
<p>If things went well you should see a <strong>green</strong> success message along with the user id and JWT exp
claim as stored in the token:</p>
<p><br></p>
<img src="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/jwt-io-signature-verification.png" alt="jwt.io successful signature verification" title="jwt.io successful signature verification">
<h2 id="9-Implementing-JWT-Token-Requests"><a href="#9-Implementing-JWT-Token-Requests" class="headerlink" title="9. Implementing JWT Token Requests"></a>9. Implementing JWT Token Requests</h2><h3 id="How-it-works-1"><a href="#How-it-works-1" class="headerlink" title="How it works"></a>How it works</h3><p>Users can request their JWT token by JSON posting their username and password to the <code>/token</code> action
after which AuthComponent will use FormAuthenticate (and thus not JwtAuth) to
validate the credentials.</p>
<p>If validation is successful a JSON 200 response (Success) will be returned with a response
body containing the JWT token.</p>
<p><br></p>
<img src="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/jwt-primer-token.png" alt="JWT primer: token request" title="JWT primer: token request">
<h3 id="Create-the-token-action"><a href="#Create-the-token-action" class="headerlink" title="Create the /token action"></a>Create the /token action</h3><p>To implement token requests add the following <code>token()</code> method to <code>src/Controller/Api/UsersController.php</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">token</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $user = <span class="keyword">$this</span>-&gt;Auth-&gt;identify();</div><div class="line">    <span class="keyword">if</span> (!$user) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">'Invalid username or password'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;set([</div><div class="line">        <span class="string">'success'</span> =&gt; <span class="keyword">true</span>,</div><div class="line">        <span class="string">'data'</span> =&gt; [</div><div class="line">            <span class="string">'token'</span> =&gt; JWT::encode([</div><div class="line">                <span class="string">'sub'</span> =&gt; $user[<span class="string">'id'</span>],</div><div class="line">                <span class="string">'exp'</span> =&gt;  time() + <span class="number">604800</span></div><div class="line">            ],</div><div class="line">            Security::salt())</div><div class="line">        ],</div><div class="line">        <span class="string">'_serialize'</span> =&gt; [<span class="string">'success'</span>, <span class="string">'data'</span>]</div><div class="line">    ]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Verify-Token-Request"><a href="#Verify-Token-Request" class="headerlink" title="Verify Token Request"></a>Verify Token Request</h3><p>To verify your setup try requesting a token for the newly created user by posting JSON data to your API using:</p>
<ul>
<li>URL <code>http://cake3api.app/api/users/token</code></li>
<li><strong>HTTP Method</strong> <code>POST</code></li>
<li><strong>Accept Header</strong> <code>application/json</code></li>
<li><strong>Content-Type Header</strong> <code>application/json</code></li>
<li>Body data with username and password in (absolutely) correct JSON format</li>
</ul>
<img src="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/api-request-token.png" alt="API Request Headers for token action" title="API Request Headers for token action">
<p>Should return Status Code 200 (Success) with a JSON response body containing
only the JWT token similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: &#123;</div><div class="line">        <span class="attr">"token"</span>: <span class="string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.q2chPMiKRzwrO3v48fi90HyJPHDLOXtwEKr7EcU3GPk"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="10-Testing-JWT-Authentication"><a href="#10-Testing-JWT-Authentication" class="headerlink" title="10. Testing JWT Authentication"></a>10. Testing JWT Authentication</h2><blockquote>
<p><strong> Before you begin testing:</strong> please be aware that some servers (like Apache) don’t automatically 
populate $_SERVER[‘HTTP_AUTHORIZATION’] even when the Authorization header is set. Make sure to 
first follow <a href="https://github.com/ADmad/cakephp-jwt-auth#working" target="_blank" rel="external">these instructions</a>
if the tests below are not functioning as described.</p>
</blockquote>
<h3 id="How-it-works-2"><a href="#How-it-works-2" class="headerlink" title="How it works"></a>How it works</h3><p>When accessing an API resource that requires authentication the JWT Plugin will look for a token
in the <code>Authorization</code> header and will validate it using the <code>Salt</code> value used by your application.</p>
<p>If validation is successful a JSON 200 response (Success) will be returned with application produced body.</p>
<p><br></p>
<img src="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/jwt-primer-authentication.png" alt="JWT primer: authentication process" title="JWT primer: authentication process">
<p><strong>Notes:</strong></p>
<ul>
<li>there is no need to create extra code, all JWT authentication logic is already present in the plugin</li>
<li>the JWT Plugin also supports passing the token as a query string parameter named <code>_token</code> (not described for brevity)</li>
<li>the <code>Authorization</code> header <strong>MUST</strong> contain a Bearer Token which is part of the OAuth V2 standard and should look like:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.q2chPMiKRzwrO3v48fi90HyJPHDLOXtwEKr7EcU3GPk</div></pre></td></tr></table></figure>
<h3 id="Verify-Authenticated-Access"><a href="#Verify-Authenticated-Access" class="headerlink" title="Verify Authenticated Access"></a>Verify Authenticated Access</h3><p>To verify successful authentication is processed as expected retrieve the list of protected cocktails from your API by using:</p>
<ul>
<li>URL <code>http://cake3api.app/api/cocktails</code></li>
<li><strong>HTTP Method</strong> <code>GET</code></li>
<li><strong>Accept Header</strong> <code>application/json</code></li>
<li><strong>Authorization Header</strong> containing <code>Bearer {YOUR-JWT-TOKEN}</code></li>
</ul>
<img src="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/api-request-authenticate.png" alt="API Request Headers for resources requiring authentication" title="API Request Headers for resources requiring authentication">
<p>Should return Status Code 200 (Success) with the familiar JSON cocktails response body:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Cosmopolitan"</span>,</div><div class="line">            <span class="attr">"description"</span>: <span class="string">"Vodka based"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Margarita"</span>,</div><div class="line">            <span class="attr">"description"</span>: <span class="string">"Tequila based"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">3</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Mojito"</span>,</div><div class="line">            <span class="attr">"description"</span>: <span class="string">"Rum based"</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Verify-Unauthenticated-Access"><a href="#Verify-Unauthenticated-Access" class="headerlink" title="Verify Unauthenticated Access"></a>Verify Unauthenticated Access</h3><p>To verify unsuccessful authentication is processed as expected retrieve the list of protected cocktails
by using the exact same query but <strong>this time removing</strong> the <code>Authorization</code> header.</p>
<p>Should instantly return Status Code 401 (Unauthorized) with a JSON response body similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"data"</span>: &#123;</div><div class="line">        <span class="attr">"message"</span>: <span class="string">"You are not authorized to access that location."</span>,</div><div class="line">        <span class="attr">"url"</span>: <span class="string">"\/api\/cocktails.json"</span>,</div><div class="line">        <span class="attr">"code"</span>: <span class="number">401</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Additional-reading"><a href="#Additional-reading" class="headerlink" title="Additional reading"></a>Additional reading</h2><ul>
<li>Follow-up tutorial <a href="/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/">How to make your CakePHP 3 API produce JSON API</a></li>
<li><a href="https://github.com/bravo-kernel/application-examples/tree/master/blog-how-to-add-jwt-authentication-to-a-cakephp-3-rest-api" target="_blank" rel="external">Git repository</a> with working end state application as produced by this tutorial</li>
<li>The <a href="https://github.com/ADmad/cakephp-jwt-auth" target="_blank" rel="external">CakePHP JWT Plugin</a> on Github</li>
<li>The <a href="https://github.com/firebase/php-jwt" target="_blank" rel="external">PHP JWT Library</a> on Github</li>
<li>The <a href="http://book.cakephp.org/3.0/en/index.html" target="_blank" rel="external">CakePHP 3 Book</a> and <a href="http://api.cakephp.org/3.0/" target="_blank" rel="external">CakePHP 3 API</a> documentation</li>
</ul>
<p><em>Hat tip to CakePHP Core Developer and JWT Plugin creator <a href="https://github.com/ADmad/" target="_blank" rel="external">ADmad</a> for
helping improve this tutorial.</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this follow-up post to
&lt;a href=&quot;/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/&quot;&gt;How to prefix route a CakePHP 3 REST API&lt;/a&gt;
we wi
    
    </summary>
    
      <category term="CakePHP" scheme="http://bravo-kernel.com/categories/cakephp/"/>
    
    
      <category term="security" scheme="http://bravo-kernel.com/tags/security/"/>
    
      <category term="cakephp" scheme="http://bravo-kernel.com/tags/cakephp/"/>
    
      <category term="cakephp3" scheme="http://bravo-kernel.com/tags/cakephp3/"/>
    
      <category term="rest" scheme="http://bravo-kernel.com/tags/rest/"/>
    
      <category term="api" scheme="http://bravo-kernel.com/tags/api/"/>
    
      <category term="jwt" scheme="http://bravo-kernel.com/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>How to prefix route a CAKEPHP 3 REST API</title>
    <link href="http://bravo-kernel.com/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/"/>
    <id>http://bravo-kernel.com/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/</id>
    <published>2015-04-15T09:47:38.000Z</published>
    <updated>2017-03-13T21:37:49.558Z</updated>
    
    <content type="html"><![CDATA[<p>In this follow-up post to
<a href="/2015/04/how-to-use-a-cakephp-3-rest-api/">How to use a CakePHP 3 REST API</a>
we will implement a
<a href="http://book.cakephp.org/3.0/en/development/routing.html#prefix-routing" target="_blank" rel="external">Prefix Route</a>
so we can benefit from clean controller logic separation and limit access
to our API resources through (only) <code>/api</code> prefixed URLs.</p>
<p><a href="https://app.getpostman.com/run-collection/197398a609a6d233a8c2" target="_blank" rel="external"><img src="https://run.pstmn.io/button.svg" alt="Run in Postman"></a></p>
<h2 id="Before-We-Begin"><a href="#Before-We-Begin" class="headerlink" title="Before We Begin"></a>Before We Begin</h2><p>This is part three of the CakePHP 3 REST API tutorial series:</p>
<ol>
<li><a href="/2015/04/how-to-build-a-cakephp-3-rest-api-in-minutes/">How to build a CakePHP 3 REST API in minutes</a></li>
<li><a href="/2015/04/how-to-use-a-cakephp-3-rest-api/">How to use a CakePHP 3 REST API</a></li>
<li>How to prefix route a CakePHP 3 REST API</li>
<li><a href="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/">How to add JWT Authentication to a CakePHP 3 REST API</a></li>
<li><a href="/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/">How to make your CakePHP 3 API produce JSON API</a></li>
<li><a href="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/">How to use a CakePHP API as the data backend for Ember in 30 minutes</a></li>
</ol>
<p>Before starting this tutorial either:</p>
<ul>
<li>complete the previous posts</li>
<li>start fresh by using these
<a href="https://github.com/bravo-kernel/application-examples/tree/master/blog-how-to-use-a-cakephp3-rest-api" target="_blank" rel="external">end-state application sources</a>,
composer installing and running the database migration</li>
</ul>
<h2 id="Creating-the-Prefix-Route"><a href="#Creating-the-Prefix-Route" class="headerlink" title="Creating the Prefix Route"></a>Creating the Prefix Route</h2><h3 id="1-Remove-previous-routing"><a href="#1-Remove-previous-routing" class="headerlink" title="1. Remove previous routing"></a>1. Remove previous routing</h3><p>Remove the general API routing created in the previous tutorial by removing these lines from your
<code>config/routes.php</code> file:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Router::extensions([<span class="string">'json'</span>, <span class="string">'xml'</span>]);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$routes-&gt;resources(<span class="string">'Cocktails'</span>);</div></pre></td></tr></table></figure>
<h3 id="2-Create-the-prefix-route"><a href="#2-Create-the-prefix-route" class="headerlink" title="2. Create the prefix route"></a>2. Create the prefix route</h3><p>Now create a new <code>/api</code> prefixed route we will use for all of our API resources by adding the
following code directly above the / scope definition in your <code>config/routes.php</code> file:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Router::prefix(<span class="string">'api'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($routes)</span> </span>&#123;</div><div class="line">    $routes-&gt;extensions([<span class="string">'json'</span>, <span class="string">'xml'</span>]);</div><div class="line">    $routes-&gt;resources(<span class="string">'Cocktails'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Please note that once again:</p>
<ul>
<li>enabling extensions is optional</li>
<li>only explicitely specified controllers will be accessible through your API</li>
</ul>
<h3 id="3-Create-the-prefix-AppController"><a href="#3-Create-the-prefix-AppController" class="headerlink" title="3. Create the prefix AppController"></a>3. Create the prefix AppController</h3><p>One of the great things about CakePHP 3 prefix routing is the <strong>automatic mapping to sub-namespaces</strong> 
which allows us to separate concern by creating dedicated controller files for (just) our API logic
inside the <code>src/Controller/Api</code> subdirectory.</p>
<p>To optimize separation even further we will create an <code>AppController</code> dedicated to the <code>Api</code>
namespace that all controllers in the <code>Api</code> namespace will extend (instead of extending the
application’s AppController).</p>
<p>Create a new file named <code>src/Controller/Api/AppController.php</code> with the following content:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>\<span class="title">Api</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Controller</span>\<span class="title">Controller</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Event</span>\<span class="title">Event</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">use</span> \<span class="title">Crud</span>\<span class="title">Controller</span>\<span class="title">ControllerTrait</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> $components = [</div><div class="line">        <span class="string">'RequestHandler'</span>,</div><div class="line">        <span class="string">'Crud.Crud'</span> =&gt; [</div><div class="line">            <span class="string">'actions'</span> =&gt; [</div><div class="line">                <span class="string">'Crud.Index'</span>,</div><div class="line">                <span class="string">'Crud.View'</span>,</div><div class="line">                <span class="string">'Crud.Add'</span>,</div><div class="line">                <span class="string">'Crud.Edit'</span>,</div><div class="line">                <span class="string">'Crud.Delete'</span></div><div class="line">            ],</div><div class="line">            <span class="string">'listeners'</span> =&gt; [</div><div class="line">                <span class="string">'Crud.Api'</span>,</div><div class="line">                <span class="string">'Crud.ApiPagination'</span>,</div><div class="line">                <span class="string">'Crud.ApiQueryLog'</span></div><div class="line">            ]</div><div class="line">        ]</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-Create-the-CocktailsController"><a href="#4-Create-the-CocktailsController" class="headerlink" title="4. Create the CocktailsController"></a>4. Create the CocktailsController</h3><p>Now create a new controller file for your cocktail resources named
<code>src/Controller/Api/CocktailsController.php</code> with the same content as used in the previous
tutorial but this time:</p>
<ul>
<li>using the <code>Api</code> sub-namespace matching our prefix route</li>
<li>extending <code>App\Controller\Api\AppController</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>\<span class="title">Api</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Controller</span>\<span class="title">Api</span>\<span class="title">AppController</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CocktailsController</span> <span class="keyword">extends</span> <span class="title">AppController</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $paginate = [</div><div class="line">        <span class="string">'page'</span> =&gt; <span class="number">1</span>,</div><div class="line">        <span class="string">'limit'</span> =&gt; <span class="number">5</span>,</div><div class="line">        <span class="string">'maxLimit'</span> =&gt; <span class="number">15</span>,</div><div class="line">        <span class="string">'sortWhitelist'</span> =&gt; [</div><div class="line">            <span class="string">'id'</span>, <span class="string">'name'</span></div><div class="line">        ]</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-Cleanup"><a href="#5-Cleanup" class="headerlink" title="5. Cleanup"></a>5. Cleanup</h3><p>Even though this is optional we will remove all CRUD Api configuration from 
<code>src/Controller/AppController.php</code> to prove that only controller logic in the <code>Api</code> namespace
is being used when we test the prefix.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Controller</span>\<span class="title">Controller</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">use</span> \<span class="title">Crud</span>\<span class="title">Controller</span>\<span class="title">ControllerTrait</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> $components = [</div><div class="line">        <span class="string">'Crud.Crud'</span> =&gt; [</div><div class="line">            <span class="string">'actions'</span> =&gt; [</div><div class="line">                <span class="string">'Crud.Index'</span>,</div><div class="line">                <span class="string">'Crud.View'</span>,</div><div class="line">                <span class="string">'Crud.Add'</span>,</div><div class="line">                <span class="string">'Crud.Edit'</span>,</div><div class="line">                <span class="string">'Crud.Delete'</span></div><div class="line">            ]</div><div class="line">        ]</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Testing-the-Routes"><a href="#Testing-the-Routes" class="headerlink" title="Testing the Routes"></a>Testing the Routes</h2><h3 id="1-Test-API-access"><a href="#1-Test-API-access" class="headerlink" title="1. Test API access"></a>1. Test API access</h3><p>If things went well you should now be able to access your cocktail API resources using the <code>/api</code>
prefix route.</p>
<p>To verify query <code>http://cake3api.app/api/cocktails.json</code> which should produce the familiar JSON
response:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Cosmopolitan"</span>,</div><div class="line">            <span class="attr">"description"</span>: <span class="string">"Vodka based"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Margarita"</span>,</div><div class="line">            <span class="attr">"description"</span>: <span class="string">"Tequila based"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">3</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Mojito"</span>,</div><div class="line">            <span class="attr">"description"</span>: <span class="string">"Rum based"</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"pagination"</span>: &#123;</div><div class="line">        <span class="attr">"page_count"</span>: <span class="number">5</span>,</div><div class="line">        <span class="attr">"current_page"</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">"has_next_page"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"has_prev_page"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"count"</span>: <span class="number">21</span>,</div><div class="line">        <span class="attr">"limit"</span>: <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>See the <a href="/2015/04/how-to-use-a-cakephp-3-rest-api/">previous tutorial</a> if you need more usage examples.</em></p>
<h3 id="2-Test-API-access-restrictions"><a href="#2-Test-API-access-restrictions" class="headerlink" title="2. Test API access restrictions"></a>2. Test API access restrictions</h3><p>If things went well your API resources should no longer be accessible using the default routes.</p>
<p>To verify query <code>http://cake3api.app/cocktails.json</code> as used in the previous tutorial. If things
went will it: </p>
<ul>
<li>should no longer produce a JSON/XML response</li>
<li>should instead show an HTML <code>MissingController</code> exception similar to the one below</li>
</ul>
<p><br></p>
<img src="/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/browser-missing-controller.png" alt="Cocktails index after prefixing route" title="Cocktails index after prefixing route">
<h3 id="3-Test-non-API-access"><a href="#3-Test-non-API-access" class="headerlink" title="3. Test non-API access"></a>3. Test non-API access</h3><p>Even though we have restricted API access to the <code>/api</code> prefix all non-API requests should still
function as expected.</p>
<p>To verify browe to <code>http://cake3api.app/cocktails</code> which should still produce the familiar
CakePHP index page:</p>
<p><br></p>
<img src="/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/browser-cocktails-index.png" alt="Cocktails index" title="Cocktails index">
<h2 id="Additional-reading"><a href="#Additional-reading" class="headerlink" title="Additional reading"></a>Additional reading</h2><ul>
<li>Follow-up tutorial <a href="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/">How to add JWT Authentication to a CakePHP 3 REST API</a></li>
<li><a href="https://github.com/bravo-kernel/application-examples/tree/master/blog-how-to-prefix-route-a-cakephp3-rest-api" target="_blank" rel="external">Git repository</a> with working end state application as produced by this tutorial</li>
<li><a href="http://book.cakephp.org/3.0/en/development/routing.html" target="_blank" rel="external">CakePHP routing documentation</a></li>
<li>The <a href="http://book.cakephp.org/3.0/en/index.html" target="_blank" rel="external">CakePHP 3 Book</a> and <a href="http://api.cakephp.org/3.0/" target="_blank" rel="external">CakePHP 3 API</a> documentation</li>
</ul>
<p><em>Hat tip to CakePHP Core Developer <a href="https://github.com/ceeram" target="_blank" rel="external">Ceeram</a> for proofing this post.</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this follow-up post to
&lt;a href=&quot;/2015/04/how-to-use-a-cakephp-3-rest-api/&quot;&gt;How to use a CakePHP 3 REST API&lt;/a&gt;
we will implement a
&lt;a 
    
    </summary>
    
      <category term="CakePHP" scheme="http://bravo-kernel.com/categories/cakephp/"/>
    
    
      <category term="cakephp" scheme="http://bravo-kernel.com/tags/cakephp/"/>
    
      <category term="cakephp3" scheme="http://bravo-kernel.com/tags/cakephp3/"/>
    
      <category term="rest" scheme="http://bravo-kernel.com/tags/rest/"/>
    
      <category term="api" scheme="http://bravo-kernel.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>How to use a CakePHP 3 REST API</title>
    <link href="http://bravo-kernel.com/2015/04/how-to-use-a-cakephp-3-rest-api/"/>
    <id>http://bravo-kernel.com/2015/04/how-to-use-a-cakephp-3-rest-api/</id>
    <published>2015-04-12T13:10:24.000Z</published>
    <updated>2017-03-22T13:46:18.622Z</updated>
    
    <content type="html"><![CDATA[<p>In this follow-up post to
<a href="/2015/04/how-to-build-a-cakephp-3-rest-api-in-minutes/">How to build a CakePHP 3 REST API in minutes</a>
we  explore the inner workings of our new API.</p>
<p><a href="https://app.getpostman.com/run-collection/197398a609a6d233a8c2" target="_blank" rel="external"><img src="https://run.pstmn.io/button.svg" alt="Run in Postman"></a></p>
<p>We will address the most common use cases by:</p>
<ol>
<li>Adding some tasty cocktail data to our application
(already listening at <code>http://cake3api.app</code>)</li>
<li>Accessing the cocktail resources through our API using the:<ul>
<li>index action (GET)</li>
<li>view action (GET)</li>
<li>add action (POST)</li>
<li>edit/update action (PUT)</li>
<li>delete action (DELETE)</li>
</ul>
</li>
<li>Configuring Pagination</li>
<li>Testing Querystring Parameters</li>
</ol>
<h2 id="Before-We-Begin"><a href="#Before-We-Begin" class="headerlink" title="Before We Begin"></a>Before We Begin</h2><p>This is part two of the CakePHP 3 REST API tutorial series:</p>
<ol>
<li><a href="/2015/04/how-to-build-a-cakephp-3-rest-api-in-minutes/">How to build a CakePHP 3 REST API in minutes</a></li>
<li>How to use a CakePHP 3 REST API</li>
<li><a href="/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/">How to prefix route a CakePHP 3 REST API</a></li>
<li><a href="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/">How to add JWT Authentication to a CakePHP 3 REST API</a></li>
<li><a href="/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/">How to make your CakePHP 3 API produce JSON API</a></li>
<li><a href="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/">How to use a CakePHP API as the data backend for Ember in 30 minutes</a></li>
</ol>
<p>Before starting this tutorial either:</p>
<ul>
<li>complete the previous post</li>
<li>start fresh by using these
<a href="https://github.com/bravo-kernel/application-examples/tree/master/blog-how-to-build-a-cakephp3-rest-api" target="_blank" rel="external">end-state application sources</a>,
composer installing and running the database migration</li>
</ul>
<h2 id="1-Adding-The-Cocktails"><a href="#1-Adding-The-Cocktails" class="headerlink" title="1. Adding The Cocktails"></a>1. Adding The Cocktails</h2><h3 id="Populate-the-database"><a href="#Populate-the-database" class="headerlink" title="Populate the database"></a>Populate the database</h3><p>Download this CakePHP
<a href="https://github.com/bravo-kernel/application-examples/blob/master/blog-how-to-use-a-cakephp3-rest-api/config/Migrations/20150411161731_initial.php" target="_blank" rel="external">database migration file</a>
to your <code>config/Migrations</code> directory.</p>
<p>Now run the following command inside your application’s root directory to
create and popuplate the <code>cocktails</code> table:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/cake migrations migrate</div></pre></td></tr></table></figure>
<h3 id="Create-the-controller"><a href="#Create-the-controller" class="headerlink" title="Create the controller"></a>Create the controller</h3><p>Create a new file named <code>src/Controller/CocktailsController.php</code> with the
following content:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Controller</span>\<span class="title">AppController</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CocktailsController</span> <span class="keyword">extends</span> <span class="title">AppController</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $paginate = [</div><div class="line">        <span class="string">'page'</span> =&gt; <span class="number">1</span>,</div><div class="line">        <span class="string">'limit'</span> =&gt; <span class="number">10</span>,</div><div class="line">        <span class="string">'maxLimit'</span> =&gt; <span class="number">100</span>,</div><div class="line">        <span class="string">'fields'</span> =&gt; [</div><div class="line">            <span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'description'</span></div><div class="line">        ],</div><div class="line">        <span class="string">'sortWhitelist'</span> =&gt; [</div><div class="line">            <span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'description'</span></div><div class="line">        ]</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Generate-the-entity-and-table"><a href="#Generate-the-entity-and-table" class="headerlink" title="Generate the entity and table"></a>Generate the entity and table</h3><p>Generate the required entity and model by running the following command inside
your application’s root directory:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/cake bake model Cocktails</div></pre></td></tr></table></figure>
<h3 id="Create-html-views"><a href="#Create-html-views" class="headerlink" title="Create html views"></a>Create html views</h3><p>Even though <strong>your API does not need/use views</strong> to output JSON and XML (that part is handled
for you by the CRUD plugin) we will still generate some html views for easy browsing the cocktails
and to prepare for the follow-up tutorials.</p>
<p>Generate the views by by running the following command inside your application’s root directory:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/cake bake template Cocktails</div></pre></td></tr></table></figure>
<p>If things went well browsing to <code>http://cake3api.app/cocktails</code> should
display something similar to:</p>
<p><br></p>
<img src="/2015/04/how-to-use-a-cakephp-3-rest-api/browser-cocktails-index.png" alt="Cocktails index" title="Cocktails index">
<h2 id="2-Accessing-API-Resources"><a href="#2-Accessing-API-Resources" class="headerlink" title="2. Accessing API Resources"></a>2. Accessing API Resources</h2><p>Your API supports accessing resources with or without extensions and we will
test both where applicable.</p>
<p>If you don’t have a client capable of testing Request Headers you might
consider using:</p>
<ul>
<li><a href="https://www.getpostman.com/docs/introduction" target="_blank" rel="external">Postman</a></li>
<li>the <a href="https://addons.mozilla.org/nl/firefox/addon/restclient/" target="_blank" rel="external">RESTClient</a> plugin for Firefox</li>
<li>the <a href="http://mmattozzi.github.io/cocoa-rest-client/" target="_blank" rel="external">Cocoa REST Client</a> if you are on a Mac</li>
</ul>
<blockquote>
<p><strong>Note:</strong> for brevity we will only test JSON responses.</p>
</blockquote>
<h3 id="Index-action-GET"><a href="#Index-action-GET" class="headerlink" title="Index action (GET)"></a>Index action (GET)</h3><p>Retrieve the first JSON page with cocktails from your API by either:</p>
<ul>
<li>retrieving directly from <code>http://cake3api.app/cocktails.json</code></li>
<li>querying <code>http://cake3api.app/cocktails</code> using:<ul>
<li><strong>HTTP Method</strong> <code>GET</code></li>
<li><strong>Accept Header</strong> <code>application/json</code></li>
</ul>
</li>
</ul>
<img src="/2015/04/how-to-use-a-cakephp-3-rest-api/api-request-headers-index.png" alt="API Request Headers for index action" title="API Request Headers for index action">
<p>Should return Status Code 200 (Success) with a JSON response body similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Cosmopolitan"</span>,</div><div class="line">            <span class="attr">"description"</span>: <span class="string">"Vodka based"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Margarita"</span>,</div><div class="line">            <span class="attr">"description"</span>: <span class="string">"Tequila based"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">3</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Mojito"</span>,</div><div class="line">            <span class="attr">"description"</span>: <span class="string">"Rum based"</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"pagination"</span>: &#123;</div><div class="line">        <span class="attr">"page_count"</span>: <span class="number">5</span>,</div><div class="line">        <span class="attr">"current_page"</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">"has_next_page"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"has_prev_page"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"count"</span>: <span class="number">21</span>,</div><div class="line">        <span class="attr">"limit"</span>: <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="View-action-GET"><a href="#View-action-GET" class="headerlink" title="View action (GET)"></a>View action (GET)</h3><p>Specify a record id to retrieve JSON details for a single cocktail by either:</p>
<ul>
<li>retrieving directly from e.g. <code>http://cake3api.app/cocktails/5.json</code></li>
<li>querying <code>http://cake3api.app/cocktails/5</code> using:<ul>
<li><strong>HTTP Method</strong> <code>GET</code></li>
<li><strong>Accept Header</strong> <code>application/json</code></li>
</ul>
</li>
</ul>
<img src="/2015/04/how-to-use-a-cakephp-3-rest-api/api-request-headers-view.png" alt="API Request Headers for view action" title="API Request Headers for view action">
<p>Should return Status Code 200 (Success) with a JSON response body similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"Caipirinha"</span>,</div><div class="line">        <span class="attr">"description"</span>: <span class="string">"Rum based"</span>,</div><div class="line">        <span class="attr">"created"</span>: <span class="string">"2015-04-11T09:33:37+0000"</span>,</div><div class="line">        <span class="attr">"modified"</span>: <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Add-action-POST"><a href="#Add-action-POST" class="headerlink" title="Add action (POST)"></a>Add action (POST)</h3><p>Create a new cocktail record by posting JSON data to your API using:</p>
<ul>
<li>The index URL <code>http://cake3api.app/cocktails</code></li>
<li><strong>HTTP Method</strong> <code>POST</code></li>
<li><strong>Accept Header</strong> <code>application/json</code></li>
<li><strong>Content-Type Header</strong> <code>application/json</code></li>
<li>Body data in (absolutely) correct JSON format</li>
</ul>
<img src="/2015/04/how-to-use-a-cakephp-3-rest-api/api-request-headers-add.png" alt="API Request Headers for add action" title="API Request Headers for add action">
<p>Should return Status Code 201 (Created) with a JSON response body containing
the <strong>id of the created cocktail</strong> similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="number">22</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Edit-Update-action-PUT"><a href="#Edit-Update-action-PUT" class="headerlink" title="Edit/Update action (PUT)"></a>Edit/Update action (PUT)</h3><p>Change an existing cocktail by posting JSON data to our API using:</p>
<ul>
<li>The view URL for the specific recipe, e.g. <code>http://cake3api.app/cocktails/5</code></li>
<li><strong>HTTP Method</strong> <code>PUT</code></li>
<li><strong>Accept Header</strong> <code>application/json</code></li>
<li><strong>Content-Type Header</strong> <code>application/json</code></li>
<li>Partial or full body data in (absolutely) correct JSON format</li>
</ul>
<img src="/2015/04/how-to-use-a-cakephp-3-rest-api/api-request-headers-edit.png" alt="API Request Headers for edit/update action" title="API Request Headers for edit/update action">
<p>Should return Status Code 200 (Success) with a JSON response body similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Delete-action-DELETE"><a href="#Delete-action-DELETE" class="headerlink" title="Delete action (DELETE)"></a>Delete action (DELETE)</h3><p>Delete an existing cocktail through your API by using:</p>
<ul>
<li>The view URL for the specific cocktail, e.g. <code>http://cake3api.app/cocktails/5</code></li>
<li><strong>HTTP Method</strong> <code>DELETE</code></li>
<li><strong>Accept Header</strong> <code>application/json</code></li>
</ul>
<img src="/2015/04/how-to-use-a-cakephp-3-rest-api/api-request-headers-delete.png" alt="API Request Headers for delete action" title="API Request Headers for delete action">
<p>Should return Status Code 200 (Success) on success with a JSON response body similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-Configuring-Pagination"><a href="#3-Configuring-Pagination" class="headerlink" title="3. Configuring Pagination"></a>3. Configuring Pagination</h2><p>The Paginator settings in <code>src/Controller/CocktailsController.php</code> are used
by your API to format the outputted JSON/XML. Let’s change some of the settings
below in preparation for querystring parameter testing.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> $paginate = [</div><div class="line">    <span class="string">'page'</span> =&gt; <span class="number">1</span>,</div><div class="line">    <span class="string">'limit'</span> =&gt; <span class="number">10</span>,</div><div class="line">    <span class="string">'maxLimit'</span> =&gt; <span class="number">100</span>,</div><div class="line">    <span class="string">'fields'</span> =&gt; [</div><div class="line">        <span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'description'</span></div><div class="line">    ],</div><div class="line">    <span class="string">'sortWhitelist'</span> =&gt; [</div><div class="line">        <span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'description'</span></div><div class="line">    ]</div><div class="line">];</div></pre></td></tr></table></figure>
<h3 id="Show-all-cocktail-details-fields"><a href="#Show-all-cocktail-details-fields" class="headerlink" title="Show all cocktail details/fields"></a>Show all cocktail details/fields</h3><p>To show all record details <strong>completely remove</strong> the <code>fields</code> array (used earlier to
keep the JSON output examples readable).</p>
<p>Querying <code>http://cake3api.app/cocktails.json?limit=2</code> should now produce
more detailed JSON similar to:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Cosmopolitan"</span>,</div><div class="line">            <span class="attr">"description"</span>: <span class="string">"Vodka based"</span>,</div><div class="line">            <span class="attr">"created"</span>: <span class="string">"2015-04-10T15:56:23+0000"</span>,</div><div class="line">            <span class="attr">"modified"</span>: <span class="literal">null</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Margarita"</span>,</div><div class="line">            <span class="attr">"description"</span>: <span class="string">"Tequila based"</span>,</div><div class="line">            <span class="attr">"created"</span>: <span class="string">"2015-04-10T15:59:39+0000"</span>,</div><div class="line">            <span class="attr">"modified"</span>: <span class="literal">null</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"pagination"</span>: &#123;</div><div class="line">        <span class="attr">"page_count"</span>: <span class="number">11</span>,</div><div class="line">        <span class="attr">"current_page"</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">"has_next_page"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"has_prev_page"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"count"</span>: <span class="number">21</span>,</div><div class="line">        <span class="attr">"limit"</span>: <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Show-less-cocktails-per-page"><a href="#Show-less-cocktails-per-page" class="headerlink" title="Show less cocktails per page"></a>Show less cocktails per page</h3><p>To show only show 5 cocktails per page change <code>limit =&gt; 10</code> to <code>limit =&gt; 5</code>.</p>
<h3 id="Set-maximum-number-of-cocktails-per-page"><a href="#Set-maximum-number-of-cocktails-per-page" class="headerlink" title="Set maximum number of cocktails per page"></a>Set maximum number of cocktails per page</h3><p>To never show more than 15 cocktails change <code>&#39;maxLimit&#39; =&gt; 100</code> to
<code>&#39;maxLimit&#39; =&gt; 15</code>.</p>
<h3 id="Prevent-sorting-by-description"><a href="#Prevent-sorting-by-description" class="headerlink" title="Prevent sorting by description"></a>Prevent sorting by description</h3><p>To prevent users from sorting by the description field remove <code>description</code>
from the <code>sortWhitelist</code> array.</p>
<h3 id="Default-page"><a href="#Default-page" class="headerlink" title="Default page"></a>Default page</h3><p>Do NOT change the default <code>page</code> used for the index resultset to prevent
frustrating further tests.</p>
<h2 id="4-Testing-Querystring-Parameters"><a href="#4-Testing-Querystring-Parameters" class="headerlink" title="4. Testing Querystring Parameters"></a>4. Testing Querystring Parameters</h2><p>Your API comes with support for querystring parameters that clients can use
to manipulate the output produced by your API.</p>
<h3 id="Limiting-results"><a href="#Limiting-results" class="headerlink" title="Limiting results"></a>Limiting results</h3><p>Clients can use the <code>limit</code> parameter to manipulate the number of records
returned by your API.</p>
<p>To verify the parameter works as expected query <code>http://cake3api.app/cocktails.json?limit=3</code>.</p>
<p>The result should list three cocktails instead of (the now default) five.</p>
<h3 id="Rate-limiting"><a href="#Rate-limiting" class="headerlink" title="Rate limiting"></a>Rate limiting</h3><p>To verify your API is respecting the <code>maxLimit</code> Paginator setting
query <code>http://cake3api.app/cocktails.json?limit=20</code>.</p>
<p>The result should only list 15 cocktails.</p>
<h3 id="Sorting-by-field"><a href="#Sorting-by-field" class="headerlink" title="Sorting by field"></a>Sorting by field</h3><p>Clients can use the <code>sort</code> parameter to specify which field should be used
to sort the results produced by your API.</p>
<p>To verify the parameter is working as expected query
<code>http://cake3api.app/cocktails.json?sort=name</code>.</p>
<p>The results should be sorted by cocktail name.</p>
<h3 id="Sorting-ascending-descending"><a href="#Sorting-ascending-descending" class="headerlink" title="Sorting ascending/descending"></a>Sorting ascending/descending</h3><p>Clients can use the <code>direction</code> parameter <strong>in combination</strong> with the <code>sort</code>
parameter to specify the direction in which results are sorted by your API
(either <code>asc</code> or <code>desc</code>).</p>
<p>To verify the parameter is working as expected query
<code>http://cake3api.app/cocktails.json?sort=name&amp;direction=desc</code>.</p>
<p>The results should be reverse-sorted by cocktail name.</p>
<h3 id="Sort-whitelist"><a href="#Sort-whitelist" class="headerlink" title="Sort whitelist"></a>Sort whitelist</h3><p>To verify your API is respecting the <code>sortWhitelist</code> Paginator setting
query <code>http://cake3api.app/cocktails.json?sort=description</code>.</p>
<p>The result should show the default (non-sorted) index results since we
removed <code>description</code> from the sortWhitelist array.</p>
<h2 id="Additional-reading"><a href="#Additional-reading" class="headerlink" title="Additional reading"></a>Additional reading</h2><ul>
<li>Follow-up tutorial “<a href="/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/">How to prefix route a CakePHP3 REST API</a>“</li>
<li><a href="https://github.com/bravo-kernel/application-examples/tree/master/blog-how-to-use-a-cakephp3-rest-api" target="_blank" rel="external">Git repository</a> with working end state application produced by this tutorial</li>
<li><a href="http://book.cakephp.org/3.0/en/controllers/components/pagination.html" target="_blank" rel="external">CakePHP pagination documentation</a></li>
<li>The <a href="http://book.cakephp.org/3.0/en/index.html" target="_blank" rel="external">CakePHP 3 Book</a> and <a href="http://api.cakephp.org/3.0/" target="_blank" rel="external">CakePHP 3 API</a> documentation</li>
</ul>
<p><em>Hat tip to CakePHP Core Developers <a href="https://github.com/lorenzo" target="_blank" rel="external">jose_zap</a> and <a href="https://github.com/admad" target="_blank" rel="external">ADmad</a> for helping create this post.</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this follow-up post to
&lt;a href=&quot;/2015/04/how-to-build-a-cakephp-3-rest-api-in-minutes/&quot;&gt;How to build a CakePHP 3 REST API in minutes&lt;/
    
    </summary>
    
      <category term="CakePHP" scheme="http://bravo-kernel.com/categories/cakephp/"/>
    
    
      <category term="cakephp" scheme="http://bravo-kernel.com/tags/cakephp/"/>
    
      <category term="cakephp3" scheme="http://bravo-kernel.com/tags/cakephp3/"/>
    
      <category term="rest" scheme="http://bravo-kernel.com/tags/rest/"/>
    
      <category term="api" scheme="http://bravo-kernel.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>How to build a CakePHP 3 REST API in minutes</title>
    <link href="http://bravo-kernel.com/2015/04/how-to-build-a-cakephp-3-rest-api-in-minutes/"/>
    <id>http://bravo-kernel.com/2015/04/how-to-build-a-cakephp-3-rest-api-in-minutes/</id>
    <published>2015-04-12T11:22:21.000Z</published>
    <updated>2017-03-13T21:37:58.162Z</updated>
    
    <content type="html"><![CDATA[<p>Step-by-step instructions for creating a full featured RESTful API using CakePHP 3.</p>
<p><a href="https://app.getpostman.com/run-collection/197398a609a6d233a8c2" target="_blank" rel="external"><img src="https://run.pstmn.io/button.svg" alt="Run in Postman"></a></p>
<h2 id="Before-We-Begin"><a href="#Before-We-Begin" class="headerlink" title="Before We Begin"></a>Before We Begin</h2><p>This is part one of the CakePHP 3 REST API tutorial series:</p>
<ol>
<li>How to build a CakePHP 3 REST API in minutes</li>
<li><a href="/2015/04/how-to-use-a-cakephp-3-rest-api/">How to use a CakePHP 3 REST API</a></li>
<li><a href="/2015/04/how-to-prefix-route-a-cakephp-3-rest-api/">How to prefix route a CakePHP 3 REST API</a></li>
<li><a href="/2015/04/how-to-add-jwt-authentication-to-a-cakephp-3-rest-api/">How to add JWT Authentication to a CakePHP 3 REST API</a></li>
<li><a href="/2017/03/how-to-make-your-cakephp-3-api-produce-jsonapi/">How to make your CakePHP 3 API produce JSON API</a></li>
<li><a href="/2017/03/how-to-use-a-cakephp-api-as-the-data-backend-for-ember-in-30-minutes/">How to use a CakePHP API as the data backend for Ember in 30 minutes</a></li>
</ol>
<h2 id="1-Create-The-Application"><a href="#1-Create-The-Application" class="headerlink" title="1. Create The Application"></a>1. Create The Application</h2><p>For this tutorial (and the follow-up posts) we will create a fresh CakePHP 3
application for our API:</p>
<ul>
<li>named <code>cake3api.app</code></li>
<li>connected to a database named <code>cake3api_app</code></li>
<li>exposed using virtualhost <code>http://cake3api.app</code></li>
</ul>
<p>If you need help with the installation either:</p>
<ul>
<li>follow the detailed installation instructions of
<a href="http://book.cakephp.org/3.0/en/tutorials-and-examples/blog/blog.html#blog-tutorial" target="_blank" rel="external">the CakePHP Blog Tutorial</a></li>
<li>install <a href="https://github.com/alt3/cakebox" target="_blank" rel="external">cakebox</a> and run
<code>cakebox application add cake3api.app</code> to set up the application, database
and virtual host</li>
</ul>
<h2 id="2-Add-the-CRUD-plugin"><a href="#2-Add-the-CRUD-plugin" class="headerlink" title="2. Add the CRUD plugin"></a>2. Add the CRUD plugin</h2><p>Add the <a href="https://github.com/FriendsOfCake/crud" target="_blank" rel="external">CRUD plugin</a> to your
application so your API will benefit of additional functionality like
pagination, thin controllers and DRY best practices.</p>
<p>Run the following command inside your application’s root directory to
composer install the plugin:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require friendsofcake/crud:~4.0</div></pre></td></tr></table></figure>
<p>Now run the following command to make your application use the plugin:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/cake plugin load Crud</div></pre></td></tr></table></figure>
<h2 id="3-Enable-the-API"><a href="#3-Enable-the-API" class="headerlink" title="3. Enable the API"></a>3. Enable the API</h2><h3 id="a-Expose-one-or-more-controllers"><a href="#a-Expose-one-or-more-controllers" class="headerlink" title="a) Expose one or more controllers"></a>a) Expose one or more controllers</h3><p>Only controllers <strong>explicitly enabled</strong> for API use will be accessible
through your API.</p>
<p>To prepare for the follow-up tutorial we will enable the <code>CocktailsController</code> by using the
<code>resources()</code> method inside the / scope definition of your <code>config/routes.php</code> file like this:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Router::scope(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($routes)</span> </span>&#123;</div><div class="line">	$routes-&gt;resources(<span class="string">'Cocktails'</span>);</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="b-Configure-the-API"><a href="#b-Configure-the-API" class="headerlink" title="b) Configure the API"></a>b) Configure the API</h3><p>Make the default API configuration available to all controllers in your
application by replacing the content of your <code>src/Controller/AppController.php</code>
file with:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Controller</span>\<span class="title">Controller</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">use</span> \<span class="title">Crud</span>\<span class="title">Controller</span>\<span class="title">ControllerTrait</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> $components = [</div><div class="line">        <span class="string">'RequestHandler'</span>,</div><div class="line">        <span class="string">'Crud.Crud'</span> =&gt; [</div><div class="line">            <span class="string">'actions'</span> =&gt; [</div><div class="line">                <span class="string">'Crud.Index'</span>,</div><div class="line">                <span class="string">'Crud.View'</span>,</div><div class="line">                <span class="string">'Crud.Add'</span>,</div><div class="line">                <span class="string">'Crud.Edit'</span>,</div><div class="line">                <span class="string">'Crud.Delete'</span></div><div class="line">            ],</div><div class="line">            <span class="string">'listeners'</span> =&gt; [</div><div class="line">                <span class="string">'Crud.Api'</span>,</div><div class="line">                <span class="string">'Crud.ApiPagination'</span>,</div><div class="line">                <span class="string">'Crud.ApiQueryLog'</span></div><div class="line">            ]</div><div class="line">        ]</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="c-Optionally-enable-extensions"><a href="#c-Optionally-enable-extensions" class="headerlink" title="c) Optionally enable extensions"></a>c) Optionally enable extensions</h3><p>Exposing your API resources <strong>requires no additional configuration</strong>, they are
already fully accessible using Request Headers.</p>
<p>However… we will assume you want to additionally allow access to your API resources using
the <a href="http://book.cakephp.org/3.0/en/development/routing.html#routing-file-extensions" target="_blank" rel="external">.json and .xml extensions</a>
so open your <code>config/routes.php</code> file and add the following line directly above
the / scope definition:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Router::extensions([<span class="string">'json'</span>, <span class="string">'xml'</span>]);</div></pre></td></tr></table></figure>
<h2 id="Stop-The-Clock"><a href="#Stop-The-Clock" class="headerlink" title="Stop The Clock!"></a>Stop The Clock!</h2><p>That’s all, you should now be able to browse to <code>http://cake3api.app/index.json</code>
and be presented with your API’s first JSON (error) response looking like this:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"Controller class Index could not be found."</span>,</div><div class="line">    <span class="attr">"url"</span>: <span class="string">"\/index.json"</span>,</div><div class="line">    <span class="attr">"code"</span>: <span class="number">404</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Quite impressive but in all fairness… even though you now have a (very) cool
API that only took minutes to create it is still pretty useless without any
meaningful data to serve so this might be a good moment to dive straight into
the follow-up tutorial:</p>
<blockquote>
<p><a href="/2015/04/how-to-use-a-cakephp-3-rest-api/">How to use a CakePHP3 REST API</a></p>
</blockquote>
<h2 id="Additional-reading"><a href="#Additional-reading" class="headerlink" title="Additional reading"></a>Additional reading</h2><ul>
<li>Follow-up tutorial “<a href="/2015/04/how-to-use-a-cakephp-3-rest-api/">How to use a CakePHP3 REST API</a>“</li>
<li><a href="https://github.com/bravo-kernel/application-examples/tree/master/blog-how-to-build-a-cakephp3-rest-api" target="_blank" rel="external">Git repository</a> with working end state application produced by this tutorial</li>
<li><a href="http://crud.readthedocs.org" target="_blank" rel="external">FriendsOfCake CRUD plugin documentation</a></li>
<li>The <a href="http://book.cakephp.org/3.0/en/index.html" target="_blank" rel="external">CakePHP 3 Book</a> and <a href="http://api.cakephp.org/3.0/" target="_blank" rel="external">CakePHP 3 API</a> documentation</li>
</ul>
<p><em>Hat tip to CakePHP Core Developers <a href="https://github.com/lorenzo" target="_blank" rel="external">jose_zap</a>
and <a href="https://github.com/admad" target="_blank" rel="external">ADmad</a> for helping create this post.</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Step-by-step instructions for creating a full featured RESTful API using CakePHP 3.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://app.getpostman.com/run-collec
    
    </summary>
    
      <category term="CakePHP" scheme="http://bravo-kernel.com/categories/cakephp/"/>
    
    
      <category term="cakephp" scheme="http://bravo-kernel.com/tags/cakephp/"/>
    
      <category term="cakephp3" scheme="http://bravo-kernel.com/tags/cakephp3/"/>
    
      <category term="rest" scheme="http://bravo-kernel.com/tags/rest/"/>
    
      <category term="api" scheme="http://bravo-kernel.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Creating proper Github releases</title>
    <link href="http://bravo-kernel.com/2015/03/creating-proper-github-releases/"/>
    <id>http://bravo-kernel.com/2015/03/creating-proper-github-releases/</id>
    <published>2015-03-27T19:30:00.000Z</published>
    <updated>2017-03-06T19:03:56.712Z</updated>
    
    <content type="html"><![CDATA[<p>Step-by-step instructions for creating Github Releases like the pros.</p>
<p>Assuming:</p>
<ul>
<li>a <code>master</code> branch</li>
<li>a more-or-less stable <code>dev</code> branch ready to be merged into master</li>
<li>a <code>VERSION.txt</code> file holding release version</li>
</ul>
<p><strong>Pro Tip:</strong> keep release cycles short, release often!</p>
<h2 id="Creating-the-release"><a href="#Creating-the-release" class="headerlink" title="Creating the release"></a>Creating the release</h2><ol>
<li>create <code>VERSION.txt</code> in your dev branch and fill it with the release number (e.g. 1.0-alpha1)</li>
<li>merge the master branch into dev</li>
<li>merge the dev branch back into master</li>
<li>go to the Github page holding your project and:<ul>
<li>select <em>releases</em></li>
<li>select <em>Draft a new release</em></li>
<li>fill in 1.0-alpha1 as the <em>Tag version</em> </li>
<li>target the master branch</li>
<li>doublecheck before pressing the “Publish release” button</li>
</ul>
</li>
</ol>
<p>That’s all there’s too it, your first release. </p>
<p><strong>Note:</strong> to prevent future merge conflicts caused by e.g. bugfixes… regularly merge master into dev!</p>
<h2 id="Starting-work-on-the-next-release"><a href="#Starting-work-on-the-next-release" class="headerlink" title="Starting work on the next release"></a>Starting work on the next release</h2><p>Now that the release is out, it’s time to start work on the next one</p>
<ol>
<li>update <code>VERSION.txt</code> in the dev branch with the next release number (e.g. 1.0-alpha2)</li>
<li>commit and push change to dev</li>
<li>add features to your dev branch</li>
</ol>
<p>Once you are ready to publish a new release… simply restart <code>Creating the release</code> but skip step 1.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Step-by-step instructions for creating Github Releases like the pros.&lt;/p&gt;
&lt;p&gt;Assuming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="Git" scheme="http://bravo-kernel.com/categories/git/"/>
    
    
      <category term="git" scheme="http://bravo-kernel.com/tags/git/"/>
    
      <category term="github" scheme="http://bravo-kernel.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Setting up Logstash 1.4.2 to forward Nginx logs to Elasticsearch</title>
    <link href="http://bravo-kernel.com/2014/12/setting-up-logstash-1-4-2-to-forward-nginx-logs-to-elasticsearch/"/>
    <id>http://bravo-kernel.com/2014/12/setting-up-logstash-1-4-2-to-forward-nginx-logs-to-elasticsearch/</id>
    <published>2014-12-21T14:13:25.000Z</published>
    <updated>2017-03-06T19:03:56.712Z</updated>
    
    <content type="html"><![CDATA[<p>Step-by-step instructions on how to configure Logstash v1.4.2 to forward your Nginx access logs to Elasticsearch v1.4.2.</p>
<h2 id="Create-a-custom-Nginx-log-format"><a href="#Create-a-custom-Nginx-log-format" class="headerlink" title="Create a custom Nginx log format"></a>Create a custom Nginx log format</h2><p>Add the following custom log_format to the <em>/etc/nginx/conf.d</em> file so it becomes available to all (virtual) Nginx hosts: </p>
<pre><code># Custom logstash format
log_format logstash &apos;$http_host &apos;
                    &apos;$remote_addr [$time_local] &apos;
                    &apos;&quot;$request&quot; $status $body_bytes_sent &apos;
                    &apos;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &apos;
                    &apos;$request_time &apos;
                    &apos;$upstream_response_time&apos;;
</code></pre><blockquote>
<p>Make sure to add this <strong>above</strong> the “# virtual hosting” directive to prevent nginx failing with “unkown log format” errors.</p>
</blockquote>
<h2 id="Enable-the-custom-Nginx-log-format"><a href="#Enable-the-custom-Nginx-log-format" class="headerlink" title="Enable the custom Nginx log format"></a>Enable the custom Nginx log format</h2><p>Update your nginx site configuration file(s) to start logging with the new custom log_format:</p>
<pre><code>#access_log /var/log/nginx/access.log;
access_log /var/log/nginx/access.log logstash;
</code></pre><p>Restart nginx. </p>
<p>Check your access log(s) and confirm that entries no longer look like the first line below (default nginx format) but look similar to second one (using our custom logstash format):</p>
<pre><code>10.33.10.1 - - [21/Dec/2014:14:36:25 +0000] &quot;GET /test_126 HTTP/1.1&quot; 404 6642 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0&quot;
my.app 10.33.10.1 [21/Dec/2014:13:58:48 +0000] &quot;GET /test_126 HTTP/1.1&quot; 404 6641 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0&quot; 2.465 2.465
</code></pre><h2 id="Create-a-Logstash-nginx-pattern"><a href="#Create-a-Logstash-nginx-pattern" class="headerlink" title="Create a Logstash nginx pattern"></a>Create a Logstash nginx pattern</h2><p>Create new file <em>/opt/logstash/server/patterns/nginx</em> with:</p>
<pre><code>NGUSERNAME [a-zA-Z\.\@\-\+_%]+
NGUSER %{NGUSERNAME}
NGINXACCESS %{IPORHOST:http_host} %{IPORHOST:clientip} \[%{HTTPDATE:timestamp}\] \&quot;(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\&quot; %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{NUMBER:request_time:float} %{NUMBER:upstream_time:float}
NGINXACCESS %{IPORHOST:http_host} %{IPORHOST:clientip} \[%{HTTPDATE:timestamp}\] \&quot;(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\&quot; %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{NUMBER:request_time:float}    
</code></pre><p><strong>Notes:</strong></p>
<ul>
<li>by creating a pattern we keep our our logstash filters clean (simply referencing the pattern)</li>
<li>the first rule catches requests that are sent upstream</li>
<li>the second rule catches all static requests (where no upstream_response_time is available)</li>
</ul>
<blockquote>
<p>Pro tip: use the online <a href="https://grokdebug.herokuapp.com" target="_blank" rel="external">Grok Debugger</a> if you need to test/develop patterns.</p>
</blockquote>
<h2 id="Create-a-Logstash-configuration-file"><a href="#Create-a-Logstash-configuration-file" class="headerlink" title="Create a Logstash configuration file"></a>Create a Logstash configuration file</h2><p>Create new file <em>/opt/logstash/server/etc/conf.d/nginx.conf</em> with:</p>
<pre><code>input {
  file {
    path =&gt; &quot;/var/log/nginx/*access*&quot;
  }
}

filter {
  mutate { replace =&gt; { &quot;type&quot; =&gt; &quot;nginx_access&quot; } }
  grok {
    match =&gt; { &quot;message&quot; =&gt; &quot;%{NGINXACCESS}&quot; }
  }
  date {
    match =&gt; [ &quot;timestamp&quot; , &quot;dd/MMM/YYYY:HH:mm:ss Z&quot; ]
  }
  geoip {
    source =&gt; &quot;clientip&quot;
  }
}

output {
  elasticsearch {
    host =&gt; &quot;localhost&quot;
    protocol =&gt; &quot;http&quot;
  }
  stdout { codec =&gt; rubydebug }
}
</code></pre><p><strong>Notes:</strong></p>
<ul>
<li>we change the timestamp to use the time the request arrived at the nginx server (instead of using the default which is the time the event was written to log, which is after the request has been processed)</li>
<li>all logentries will be indexed using Elasticsearch type “nginx_access”</li>
<li>we do NOT use the “index” directive in our output, all logentries will use Elasticsearch index “logstash-%{+YYYY.MM.dd}”</li>
</ul>
<blockquote>
<p>We MUST use the http protocol. By default Logstash will use the “node” protocol which joins Logstash as a participating node to the Elasticsearch cluster using it’s embedded ES library. Since that embedded version (1.1.1) is currently incompatible with version 1.4.2 it will cause issues all over the place like breaking Kibana due to incompatible nodes etc.</p>
</blockquote>
<h2 id="Start-logging-to-Elasticsearch"><a href="#Start-logging-to-Elasticsearch" class="headerlink" title="Start logging to Elasticsearch"></a>Start logging to Elasticsearch</h2><p>Manually test your new Logstash configuration by running:</p>
<pre><code>/opt/logstash/server/bin/logstash -f /opt/logstash/server/etc/conf.d/nginx.conf
</code></pre><p>If your logs are appearing in Elasticsearch restart your logstash service. </p>
<h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h2><p>Hat-tip to <a href="http://tech.ftbpro.com/post/92330141601/getting-the-best-out-of-logstash-for-nginx" target="_blank" rel="external">FTBpro developers</a> for the inspiration and the Logstash pattern</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Step-by-step instructions on how to configure Logstash v1.4.2 to forward your Nginx access logs to Elasticsearch v1.4.2.&lt;/p&gt;
&lt;h2 id=&quot;Crea
    
    </summary>
    
      <category term="Sysop" scheme="http://bravo-kernel.com/categories/sysop/"/>
    
    
      <category term="nginx" scheme="http://bravo-kernel.com/tags/nginx/"/>
    
      <category term="logstash" scheme="http://bravo-kernel.com/tags/logstash/"/>
    
      <category term="elasticsearch" scheme="http://bravo-kernel.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Kitchen converge re-run error on Windows against Vagrant with synced folder</title>
    <link href="http://bravo-kernel.com/2014/10/kitchen-converge-re-run-error-on-windows-against-vagrant-with-synced-folder/"/>
    <id>http://bravo-kernel.com/2014/10/kitchen-converge-re-run-error-on-windows-against-vagrant-with-synced-folder/</id>
    <published>2014-10-15T20:26:33.000Z</published>
    <updated>2017-03-06T19:03:56.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-case"><a href="#The-case" class="headerlink" title="The case"></a>The case</h2><p>Running <code>kitchen converge</code> on Windows using Chef-DK against a .kitchen.yml vagrant server with a synced folder:</p>
<ul>
<li>succeeds the first time</li>
<li>fails every following attempt stating there is <em>“No such file or directory”</em></li>
</ul>
<p>Strangely enough:</p>
<ul>
<li>the mentioned file does exist (both locally and remote)</li>
<li>manually deleting the mounted folder solves the problem</li>
</ul>
<h2 id="The-error"><a href="#The-error" class="headerlink" title="The error"></a>The error</h2><p>Where <code>kitchen converge</code> would normally display <em>“Removing non-cookbook files before transfer”</em> it now produces the following errors.</p>
<p><strong>On screen:</strong></p>
<pre><code>-----&gt; Starting Kitchen (v1.2.1)
-----&gt; Converging &lt;default-ubuntu-1404&gt;...
       Preparing files for transfer
       Resolving cookbook dependencies with Berkshelf 3.1.5...
&gt;&gt;&gt;&gt;&gt;&gt; ------Exception-------
&gt;&gt;&gt;&gt;&gt;&gt; Class: Kitchen::ActionFailed
&gt;&gt;&gt;&gt;&gt;&gt; Message: Failed to complete #converge action: [No such file or directory - C:/Users/bravo-kernel/AppData/Local/Temp/default-ubuntu-1404-sandbox-20141014-5236-n5f95k/cookbooks/vagrant-hexo/blogs/default-ubuntu-1404/demo/node_modules/hexo-renderer-stylus/node_modules/nib/node_modules/stylus/node_modules/glob/node_modules/inherits/inherits_browser.js]
&gt;&gt;&gt;&gt;&gt;&gt; ----------------------
&gt;&gt;&gt;&gt;&gt;&gt; Please see .kitchen/logs/kitchen.log for more details
&gt;&gt;&gt;&gt;&gt;&gt; Also try running `kitchen diagnose --all` for configuration
</code></pre><p><strong>.kitchen/logs/kitchen.log:</strong></p>
<pre><code>I, [2014-10-14T18:09:33.513287 #5236]  INFO -- Kitchen: -----&gt; Starting Kitchen (v1.2.1)
I, [2014-10-14T18:09:37.866034 #5236]  INFO -- Kitchen: -----&gt; Converging &lt;default-ubuntu-1404&gt;...
E, [2014-10-14T18:09:44.489123 #5236] ERROR -- Kitchen: ------Exception-------
E, [2014-10-14T18:09:44.489123 #5236] ERROR -- Kitchen: Class: Kitchen::ActionFailed
E, [2014-10-14T18:09:44.489123 #5236] ERROR -- Kitchen: Message: Failed to complete #converge action: [No such file or directory - C:/Users/bravo-kernel/AppData/Local/Temp/default-ubuntu-1404-sandbox-20141014-5236-n5f95k/cookbooks/vagrant-hexo/blogs/default-ubuntu-1404/demo/node_modules/hexo-renderer-stylus/node_modules/nib/node_modules/stylus/node_modules/glob/node_modules/inherits/inherits_browser.js]
E, [2014-10-14T18:09:44.489123 #5236] ERROR -- Kitchen: ---Nested Exception---
E, [2014-10-14T18:09:44.489123 #5236] ERROR -- Kitchen: Class: Errno::ENOENT
E, [2014-10-14T18:09:44.489123 #5236] ERROR -- Kitchen: Message: No such file or directory - C:/Users/bravo-kernel/AppData/Local/Temp/default-ubuntu-1404-sandbox-20141014-5236-n5f95k/cookbooks/vagrant-hexo/blogs/default-ubuntu-1404/demo/node_modules/hexo-renderer-stylus/node_modules/nib/node_modules/stylus/node_modules/glob/node_modules/inherits/inherits_browser.js
E, [2014-10-14T18:09:44.489123 #5236] ERROR -- Kitchen: ------Backtrace-------
</code></pre><h2 id="The-cause"><a href="#The-cause" class="headerlink" title="The cause"></a>The cause</h2><p>The reason is so obvious one might never consider it at all:</p>
<blockquote>
<p>The path to the non-cookbook file to be deleted exceeds the maximum of 255 characters supported by the Windows platform causing the kitchen delete command to fail.</p>
</blockquote>
<h2 id="The-solution"><a href="#The-solution" class="headerlink" title="The solution"></a>The solution</h2><p>Since there does not seem to be a solid solution (yet) resort to one of the following workarounds:</p>
<ul>
<li>shortening the path by moving the user’s sandbox directory to a higher level (e.g. directly unde    r C:)</li>
<li>shortening the path by changing the directory structure on the remote node</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-case&quot;&gt;&lt;a href=&quot;#The-case&quot; class=&quot;headerlink&quot; title=&quot;The case&quot;&gt;&lt;/a&gt;The case&lt;/h2&gt;&lt;p&gt;Running &lt;code&gt;kitchen converge&lt;/code&gt; on Windo
    
    </summary>
    
      <category term="Sysop" scheme="http://bravo-kernel.com/categories/sysop/"/>
    
    
      <category term="chef-dk" scheme="http://bravo-kernel.com/tags/chef-dk/"/>
    
      <category term="kitchen" scheme="http://bravo-kernel.com/tags/kitchen/"/>
    
      <category term="vagrant" scheme="http://bravo-kernel.com/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>How to fix Shellshock Bash Vulnerability using Chef</title>
    <link href="http://bravo-kernel.com/2014/09/how-to-fix-shellshock-bash-vulnerability-using-chef/"/>
    <id>http://bravo-kernel.com/2014/09/how-to-fix-shellshock-bash-vulnerability-using-chef/</id>
    <published>2014-09-28T20:07:09.000Z</published>
    <updated>2017-03-06T19:03:56.708Z</updated>
    
    <content type="html"><![CDATA[<p>Two copy-paste solutions for your recipes that will:</p>
<ul>
<li>make your Chef deployed servers <a href="http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6271" target="_blank" rel="external">Shellshock</a> proof</li>
<li>display <code>shellshock-fix</code> during provisioning to make you look good as a bonus</li>
</ul>
<h2 id="Using-package"><a href="#Using-package" class="headerlink" title="Using package"></a>Using package</h2><p>Place anywhere after your <code>apt-get update</code> action.</p>
<pre><code>package &apos;shellshock-fix&apos; do
  package_name &apos;bash&apos;
  action :upgrade
end
</code></pre><h2 id="Using-execute"><a href="#Using-execute" class="headerlink" title="Using execute"></a>Using execute</h2><p>Place anywhere.</p>
<pre><code>execute &quot;shellshock-fix&quot; do
  command &apos;apt-get update &amp;&amp; sudo apt-get install --only-upgrade bash&apos;
  action :run
end
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Two copy-paste solutions for your recipes that will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make your Chef deployed servers &lt;a href=&quot;http://web.nvd.nist.gov/view/v
    
    </summary>
    
      <category term="Sysop" scheme="http://bravo-kernel.com/categories/sysop/"/>
    
    
      <category term="chef" scheme="http://bravo-kernel.com/tags/chef/"/>
    
      <category term="shellshock" scheme="http://bravo-kernel.com/tags/shellshock/"/>
    
  </entry>
  
</feed>
